{"version":3,"file":"svelte-drag-and-drop-actions.esm.js","sources":["../src/svelte-drag-and-drop-actions.ts"],"sourcesContent":["//----------------------------------------------------------------------------//\n//                        Svelte Drag-and-Drop Actions                        //\n//----------------------------------------------------------------------------//\n\n  import {\n    global, throwError,\n    ValueIsNumber, ValueIsFiniteNumber, ValueIsString, ValueIsNonEmptyString,\n    ValueIsFunction, ValueIsPlainObject, ValueIsOneOf,\n    allowedFiniteNumber, allowedIntegerInRange, allowedOrdinal,\n    allowedString, allowedNonEmptyString,\n    allowPlainObject, allowedPlainObject,\n    allowListSatisfying, allowedFunction,\n    ObjectIsNotEmpty, quoted, constrained\n  } from 'javascript-interface-library'\n\n  import Conversion from 'svelte-coordinate-conversion'\n\n/**** never ever trust module loading if you REALLY need a singleton! ****/\n// finding multiple existing singletons if you actually trust them is so hard!\n\n  type ContextType = extendedDragAndDropSupport & SupportForHoldingAndPanning\n  const Context:ContextType = (            // make this package a REAL singleton\n    '__DragAndDropActions' in global\n    ? global.__DragAndDropActions\n    : global.__DragAndDropActions = {}\n  )\n\n//-------------------------------------------------------------------------------\n//--             use:asDraggable={options} - \"drag\" without \"drop\"             --\n//-------------------------------------------------------------------------------\n\n  export type PositionReference = (\n    'parent' | 'body' | string | HTMLElement | SVGElement // | MathMLElement\n  )\n\n  export type Position = { x:number, y:number }\n\n  export type DragDummy = (\n    string | HTMLElement | SVGElement | // MathMLElement |\n    ((DraggableExtras:any, Element:HTMLElement|SVGElement) => HTMLElement|SVGElement) |\n    'standard' | 'none'\n  ) | null | undefined\n\n  type DraggableOptions = {\n    Extras?:any,\n    relativeTo?:PositionReference, onlyFrom?:string, neverFrom?:string,\n    Dummy?:DragDummy, DummyOffsetX?:number, DummyOffsetY?:number,\n    minX?:number, minY?:number, maxX?:number, maxY?:number,\n    Pannable?:string|HTMLElement|SVGElement,\n    PanSensorWidth?:number, PanSensorHeight?:number, PanSpeed?:number,\n    onDragStart?:Position | ((DraggableExtras:any) => Position),\n    onDragMove?: (x:number,y:number, dx:number,dy:number, DraggableExtras:any) => void,\n    onDragEnd?:  (x:number,y:number, dx:number,dy:number, DraggableExtras:any) => void,\n  }\n\n/**** parsedDraggableOptions ****/\n\n  function parsedDraggableOptions (Options:any):DraggableOptions {\n    Options = allowedPlainObject('drag options',Options) || {}\n\n    let Extras:any, relativeTo:PositionReference\n    let onlyFrom:string|undefined, neverFrom:string|undefined\n    let Dummy:DragDummy, DummyOffsetX:number, DummyOffsetY:number\n    let minX:number, minY:number, maxX:number, maxY:number\n    let Pannable:string|HTMLElement|SVGElement|undefined\n    let PanSensorWidth:number, PanSensorHeight:number, PanSpeed:number\n    let onDragStart:Function, onDragMove:Function, onDragEnd:Function, onDragCancel:Function\n\n    Extras = Options.Extras\n\n    switch (true) {\n      case (Options.relativeTo == null):\n        relativeTo = 'parent'; break\n      case (Options.relativeTo === 'parent'):\n      case (Options.relativeTo === 'body'):\n      case ValueIsNonEmptyString(Options.relativeTo):\n      case (Options.relativeTo instanceof HTMLElement):\n      case (Options.relativeTo instanceof SVGElement):\n//    case (Options.relativeTo instanceof MathMLElement):\n        relativeTo = Options.relativeTo as PositionReference; break\n      default: throwError(\n        'InvalidArgument: invalid position reference given'\n      )\n    }\n\n    onlyFrom  = allowedNonEmptyString ('\"onlyFrom\" CSS selector',Options.onlyFrom)\n    neverFrom = allowedNonEmptyString('\"neverFrom\" CSS selector',Options.neverFrom)\n\n    switch (true) {\n      case (Options.Dummy == null):\n        Dummy = undefined; break\n      case (Options.Dummy === 'standard'):\n      case (Options.Dummy === 'none'):\n      case ValueIsNonEmptyString(Options.Dummy):\n      case (Options.Dummy instanceof HTMLElement):\n      case (Options.Dummy instanceof SVGElement):\n//    case (Options.Dummy instanceof MathMLElement):\n      case ValueIsFunction(Options.Dummy):\n        Dummy = Options.Dummy as DragDummy; break\n      default: throwError(\n        'InvalidArgument: invalid drag dummy specification given'\n      )\n    }\n\n    DummyOffsetX = allowedFiniteNumber('dummy x offset',Options.DummyOffsetX)\n    DummyOffsetY = allowedFiniteNumber('dummy y offset',Options.DummyOffsetY)\n\n    minX = allowedFiniteNumber('min. x position',Options.minX)\n      if (minX == null) { minX = -Infinity }\n    minY = allowedFiniteNumber('min. y position',Options.minY)\n      if (minY == null) { minY = -Infinity }\n    maxX = allowedFiniteNumber('max. x position',Options.maxX)\n      if (maxX == null) { maxX = Infinity }\n    maxY = allowedFiniteNumber('max. y position',Options.maxY)\n      if (maxY == null) { maxY = Infinity }\n\n    switch (true) {\n      case (Options.Pannable == null):\n        Pannable = undefined; break\n      case ValueIsNonEmptyString(Options.Pannable):\n      case (Options.Pannable instanceof HTMLElement):\n      case (Options.Pannable instanceof SVGElement):\n//    case (Options.Pannable instanceof MathMLElement):\n        Pannable = Options.Pannable; break\n      default: throwError(\n        'InvalidArgument: invalid \"Pannable\" specification given'\n      )\n    }\n\n    PanSensorWidth  = allowedOrdinal ('panning sensor width',Options.PanSensorWidth)\n      if (PanSensorWidth  == null) { PanSensorWidth = 20 }\n    PanSensorHeight = allowedOrdinal('panning sensor height',Options.PanSensorHeight)\n      if (PanSensorHeight == null) { PanSensorHeight = 20 }\n    PanSpeed        = allowedOrdinal        ('panning speed',Options.PanSpeed)\n      if (PanSpeed == null) { PanSpeed = 10 }\n\n    if (ValueIsPosition(Options.onDragStart)) {\n      let { x,y } = Options.onDragStart as Position\n      onDragStart = () => ({x,y})\n    } else {\n      onDragStart = allowedFunction('\"onDragStart\" handler', Options.onDragStart)\n    }\n\n    onDragMove = allowedFunction('\"onDragMove\" handler', Options.onDragMove)\n    onDragEnd  = allowedFunction('\"onDragEnd\" handler',  Options.onDragEnd)\n\n    return {\n      Extras, relativeTo, onlyFrom,neverFrom, Dummy, DummyOffsetX,DummyOffsetY,\n      minX,minY, maxX,maxY,\n      Pannable, PanSensorWidth,PanSensorHeight, PanSpeed,\n// @ts-ignore we cannot validate given functions any further\n      onDragStart, onDragMove, onDragEnd, onDragCancel\n    }\n  }\n\n/**** use:asDraggable={options} ****/\n\n  export function asDraggable (\n    Element:HTMLElement|SVGElement, Options:DraggableOptions\n  ) {\n    let isDragged:boolean\n    let currentDraggableOptions:DraggableOptions\n\n    let PositionReference:Element         // element with user coordinate system\n    let ReferenceDeltaX:number, ReferenceDeltaY:number  // mouse -> user coord.s\n    let PositioningWasDelayed:boolean // workaround for prob. with \"drag\" events\n    let DragImage:Element | undefined\n    let initialPosition:Position                    // given in user coordinates\n    let lastPosition:   Position                                         // dto.\n\n    isDragged = false\n\n    currentDraggableOptions = parsedDraggableOptions(Options)\n\n  /**** startDragging ****/\n\n    function startDragging (originalEvent:DragEvent) {\n      let Options = currentDraggableOptions\n\n      if (fromForbiddenElement(Element,Options,originalEvent)) {\n        originalEvent.stopPropagation()\n        originalEvent.preventDefault()\n        return false\n      }\n\n      PositionReference = PositionReferenceFor(Element,Options)\n\n      let relativePosition = Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n      )                                         // relative to reference element\n\n      ReferenceDeltaX = ReferenceDeltaY = 0; initialPosition = { x:0,y:0 }\n      if (Options.onDragStart == null) {\n        initialPosition = { x:0,y:0 }               // given in user coordinates\n      } else {\n        try {\n          let StartPosition = (Options.onDragStart as Function)(Options.Extras)\n          if (ValueIsPlainObject(StartPosition)) {\n            let x = allowedFiniteNumber('x start position',StartPosition.x)\n            let y = allowedFiniteNumber('y start position',StartPosition.y)\n\n            ReferenceDeltaX = x - relativePosition.left\n            ReferenceDeltaY = y - relativePosition.top\n\n            x = constrained(x, Options.minX,Options.maxX)\n            y = constrained(y, Options.minY,Options.maxY)\n\n            initialPosition = { x,y }               // given in user coordinates\n          }\n        } catch (Signal) {\n          console.error('\"onDragStart\" handler failed',Signal)\n        }\n      }\n\n      lastPosition = initialPosition\n\n      PositioningWasDelayed = false                    // initializes workaround\n\n      if (Options.Dummy == null) {\n        Options.Dummy = 'none'      // this is the default for \"use.asDraggable\"\n      }\n\n      DragImage = DragImageFor(Element,Options)\n      if ((DragImage != null) && (originalEvent.dataTransfer != null)) {\n        let OffsetX = Options.DummyOffsetX as number\n        let OffsetY = Options.DummyOffsetY as number\n\n        if ((OffsetX == null) || (OffsetY == null)) {\n          let PositionInDraggable = Conversion.fromDocumentTo(\n            'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n          )\n\n          if (OffsetX == null) { OffsetX = PositionInDraggable.left }\n          if (OffsetY == null) { OffsetY = PositionInDraggable.top }\n        }\n\n        switch (true) {\n          case (Options.Dummy === 'none'):\n            originalEvent.dataTransfer.setDragImage(DragImage,0,0)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(DragImage as HTMLElement)\n            },0)\n            break\n          case ValueIsString(Options.Dummy):\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(\n                (DragImage as HTMLElement).parentElement as HTMLElement\n              )\n            },0)\n            break\n          default:\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n        }\n      }\n\n      if (originalEvent.dataTransfer != null) {\n        originalEvent.dataTransfer.effectAllowed = 'none'\n      }\n\n      isDragged = true\n      setTimeout(() => Element.classList.add('dragged'), 0)\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** continueDragging ****/\n\n    function continueDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n      let Options = currentDraggableOptions\n\n      if (\n        (originalEvent.screenX === 0) && (originalEvent.screenY === 0) &&\n        ! PositioningWasDelayed\n      ) {\n        PositioningWasDelayed = true // last \"drag\" event contains wrong coord.s\n      } else {\n        PositioningWasDelayed = false\n\n        performPanningFor(\n          'draggable',\n          Element, Options, originalEvent.pageX,originalEvent.pageY\n        )\n\n        let relativePosition = Conversion.fromDocumentTo(\n          'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n        )                                       // relative to reference element\n\n        let x  = relativePosition.left + ReferenceDeltaX  // in user coordinates\n        let y  = relativePosition.top  + ReferenceDeltaY\n\n        x = constrained(x, Options.minX,Options.maxX)\n        y = constrained(y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x         // calculated AFTER constraining x,y\n        let dy = y - lastPosition.y                                      // dto.\n\n        lastPosition = { x,y }\n\n        invokeHandler('onDragMove', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** finishDragging ****/\n\n    function finishDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n//    continueDragging(originalEvent)           // NO! positions might be wrong!\n\n      let Options = currentDraggableOptions\n\n      if (Options.onDragEnd != null) {\n        let x = constrained(lastPosition.x, Options.minX,Options.maxX)\n        let y = constrained(lastPosition.y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x\n        let dy = y - lastPosition.y\n\n        invokeHandler('onDragEnd', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      isDragged = false\n      Element.classList.remove('dragged')\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** updateDraggableOptions ****/\n\n    function updateDraggableOptions (Options:any):void {\n      Options = parsedDraggableOptions(Options)\n\n      if (\n        (currentDraggableOptions.Extras == null) && (Options.Extras != null)\n      ) {\n        currentDraggableOptions.Extras = Options.Extras\n      }           // Extras may be set with delay, but remain constant afterwards\n\n      currentDraggableOptions.Dummy = (\n        Options.Dummy || currentDraggableOptions.Dummy\n      )\n\n      currentDraggableOptions.minX = Options.minX\n      currentDraggableOptions.minY = Options.minY\n      currentDraggableOptions.maxX = Options.maxX\n      currentDraggableOptions.maxY = Options.maxY\n\n      currentDraggableOptions.Pannable        = Options.Pannable\n      currentDraggableOptions.PanSensorWidth  = Options.PanSensorWidth\n      currentDraggableOptions.PanSensorHeight = Options.PanSensorHeight\n      currentDraggableOptions.PanSpeed        = Options.PanSpeed\n\n      currentDraggableOptions.onDragStart = (\n        Options.onDragStart || currentDraggableOptions.onDragStart\n      )           // may be used to update initial position for subsequent drags\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragstart', startDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drag',      continueDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragend',   finishDragging)\n\n    return { update:updateDraggableOptions }\n  }\n\n/**** fromForbiddenElement ****/\n\n  function fromForbiddenElement (\n    Element:HTMLElement|SVGElement, Options:DraggableOptions,\n    originalEvent:DragEvent\n  ):boolean {\n    if ((Options.onlyFrom != null) || (Options.neverFrom != null)) {\n      let x = originalEvent.clientX\n      let y = originalEvent.clientY\n\n      let touchedElement = document.elementFromPoint(x,y) as HTMLElement\n\n//    elementFromPoint considers elements with \"pointer-events\" <> \"none\" only\n//    but sometimes, \"pointer-events:none\" is needed for proper operation\n\n      touchedElement = innerElementOf(touchedElement, x,y)\n\n      if (Options.onlyFrom != null) {\n        let fromElement = touchedElement.closest(Options.onlyFrom as string)\n        if ((Element !== fromElement) && ! Element.contains(fromElement)) {\n          return true\n        }\n      }\n\n      if (Options.neverFrom != null) {\n        let fromElement = touchedElement.closest(Options.neverFrom as string)\n        if ((Element === fromElement) || Element.contains(fromElement)) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n/**** innerElementOf ****/\n\n  function innerElementOf (Candidate:HTMLElement, x:number,y:number):HTMLElement {\n    let innerElements = Candidate.children\n    for (let i = 0, l = innerElements.length; i < l; i++) {\n      let innerElement = innerElements[i] as HTMLElement\n\n      let Position = Conversion.fromLocalTo(\n        'viewport', { left:0, top:0 }, innerElement\n      )\n      if ((x < Position.left) || (y < Position.top)) { continue }\n\n      if (x > Position.left+innerElement.offsetWidth-1) { continue }\n      if (y > Position.top+innerElement.offsetHeight-1) { continue }\n\n      return innerElementOf(innerElement, x,y)\n    }\n\n    return Candidate               // this is the innermost element at (x,y)\n  }\n\n/**** extended Drag-and-Drop Support ****/\n\n  type extendedDragAndDropSupport = {\n    currentDroppableExtras:any,        // extras for currently dragged droppable\n    currentDropZoneExtras:any,         // extras for currently hovered drop zone\n    currentDropZoneElement:Element|undefined,                 // dto. as Element\n\n    DroppableWasDropped:boolean,        // indicates a successful drop operation\n    currentDropZonePosition:Position|undefined, // position relative to DropZone\n    currentDropOperation:DropOperation|undefined,       // actual drop operation\n    currentTypeTransferred:string|undefined,  // actual type of transferred data\n    currentDataTransferred:any,                       // actual data transferred\n  }\n\n/**** Support for Holding and Panning ****/\n\n  type SupportForHoldingAndPanning = {\n    HoldPosition?:Position,               // current position to compare against\n    HoldTimer?:any,\n    HoldWasTriggeredForElement?:HTMLElement | SVGElement,\n\n    DropZonePanning?:boolean\n  }                                           // because we trigger it once only\n\n//-------------------------------------------------------------------------------\n//--               use:asDroppable={options} - \"drag\" and \"drop\"               --\n//-------------------------------------------------------------------------------\n\n  export const DropOperations = [ 'copy', 'move', 'link' ]\n  export type  DropOperation  = typeof DropOperations[number]\n\n  export type DataOfferSet = { [Type:string]:string }\n\n  type DroppableOptions = DraggableOptions & {\n    Operations?:string,// consisting of 'copy', 'move', 'link' (blank-separated)\n    DataToOffer?:DataOfferSet,\n    onDropZoneEnter?: (x:number,y:number, DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropZoneHover?: (x:number,y:number, DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropZoneLeave?: (DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropped?:       (x:number,y:number, Operation:DropOperation,\n                        TypeTransferred:string, DataTransferred:any,\n                        DropZoneExtras:any, DroppableExtras:any) => void,\n  }\n\n/**** parsedDroppableOptions ****/\n\n  function parsedDroppableOptions (Options:any):DroppableOptions {\n    Options = allowedPlainObject('drop options',Options) || {}\n\n    let Operations:string, DataToOffer:DataOfferSet\n    let onDropZoneEnter:Function, onDropZoneHover:Function, onDropZoneLeave:Function\n    let onDropped:Function\n\n    Operations  = parsedOperations('list of allowed operations',Options.Operations,'copy')\n    DataToOffer = Object.assign(\n      {}, allowedPlainObject('data to be offered',Options.DataToOffer)\n    )\n    if ('none' in DataToOffer) throwError(\n      'InvalidArgument: \"none\" is not a valid data type'\n    )\n\n    onDropZoneEnter = allowedFunction('\"onDropZoneEnter\" handler',Options.onDropZoneEnter)\n    onDropZoneHover = allowedFunction('\"onDropZoneHover\" handler',Options.onDropZoneHover)\n    onDropZoneLeave = allowedFunction('\"onDropZoneLeave\" handler',Options.onDropZoneLeave)\n    onDropped       = allowedFunction('\"onDropped\" handler',      Options.onDropped)\n\n    return {\n      Operations, DataToOffer,\n// @ts-ignore we cannot validate given functions any further\n      onDropZoneEnter, onDropZoneHover, onDropZoneLeave, onDropped\n    }\n  }\n\n/**** use:asDroppable={options} ****/\n\n  export function asDroppable (\n    Element:HTMLElement|SVGElement, Options:DroppableOptions\n  ) {\n    let isDragged:boolean\n    let currentDraggableOptions:DraggableOptions\n    let currentDroppableOptions:DroppableOptions\n\n    let PositionReference:Element         // element with user coordinate system\n    let ReferenceDeltaX:number, ReferenceDeltaY:number  // mouse -> user coord.s\n    let PositioningWasDelayed:boolean // workaround for prob. with \"drag\" events\n    let DragImage:Element | undefined\n    let initialPosition:Position                    // given in user coordinates\n    let lastPosition:   Position                                         // dto.\n\n    let lastDropZoneElement:HTMLElement|SVGElement|undefined\n    let lastDropZoneExtras:any\n\n    isDragged = false\n\n    currentDraggableOptions = parsedDraggableOptions(Options)\n    currentDroppableOptions = parsedDroppableOptions(Options)\n\n  /**** startDragging ****/\n\n    function startDragging (originalEvent:DragEvent) {\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (fromForbiddenElement(Element,Options,originalEvent)) {\n        originalEvent.stopPropagation()\n        originalEvent.preventDefault()\n        return false\n      }\n\n      PositionReference = PositionReferenceFor(Element,Options)\n\n      let relativePosition = Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n      )                                         // relative to reference element\n\n      ReferenceDeltaX = ReferenceDeltaY = 0; initialPosition = { x:0,y:0 }\n      if (Options.onDragStart == null) {\n        initialPosition = { x:0,y:0 }               // given in user coordinates\n      } else {\n        try {\n          let StartPosition = (Options.onDragStart as Function)(Options.Extras)\n          if (ValueIsPlainObject(StartPosition)) {\n            let x = allowedFiniteNumber('x start position',StartPosition.x)\n            let y = allowedFiniteNumber('y start position',StartPosition.y)\n\n            ReferenceDeltaX = x - relativePosition.left\n            ReferenceDeltaY = y - relativePosition.top\n\n            x = constrained(x, Options.minX,Options.maxX)\n            y = constrained(y, Options.minY,Options.maxY)\n\n            initialPosition = { x,y }               // given in user coordinates\n          }\n        } catch (Signal) {\n          console.error('\"onDragStart\" handler failed',Signal)\n        }\n      }\n\n      lastPosition        = initialPosition\n      lastDropZoneElement = undefined\n      lastDropZoneExtras  = undefined\n\n      PositioningWasDelayed = false                    // initializes workaround\n\n      if (Options.Dummy == null) {\n        Options.Dummy = 'standard'  // this is the default for \"use.asDroppable\"\n      }\n\n      DragImage = DragImageFor(Element,Options)\n      if ((DragImage != null) && (originalEvent.dataTransfer != null)) {\n        let OffsetX = Options.DummyOffsetX as number\n        let OffsetY = Options.DummyOffsetY as number\n\n        if ((OffsetX == null) || (OffsetY == null)) {\n          let PositionInDraggable = Conversion.fromDocumentTo(\n            'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n          )\n\n          if (OffsetX == null) { OffsetX = PositionInDraggable.left }\n          if (OffsetY == null) { OffsetY = PositionInDraggable.top }\n        }\n\n        switch (true) {\n          case (Options.Dummy === 'none'):\n            originalEvent.dataTransfer.setDragImage(DragImage,0,0)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(DragImage as HTMLElement)\n            },0)\n            break\n          case ValueIsString(Options.Dummy):\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(\n                (DragImage as HTMLElement).parentElement as HTMLElement\n              )\n            },0)\n            break\n          default:\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n        }\n      }\n\n      if (originalEvent.dataTransfer != null) {\n        let allowedEffects = allowedEffectsFrom(Options.Operations as string)\n        originalEvent.dataTransfer.effectAllowed = allowedEffects\n\n        if (ObjectIsNotEmpty(Options.DataToOffer)) {\n          for (let Type in Options.DataToOffer) {\n            if (Options.DataToOffer.hasOwnProperty(Type)) {\n              originalEvent.dataTransfer.setData(\n                Type, Options.DataToOffer[Type]\n              )\n            }\n          }\n        }\n      }\n\n      Context.currentDroppableExtras  = Options.Extras\n      Context.currentDropZoneExtras   = undefined\n      Context.currentDropZonePosition = undefined\n      Context.currentDropZoneElement  = undefined\n\n      Context.DroppableWasDropped     = false\n      Context.currentDropOperation    = undefined\n      Context.currentTypeTransferred  = undefined\n      Context.currentDataTransferred  = undefined\n\n      isDragged = true\n      setTimeout(() => Element.classList.add('dragged'), 0)\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** continueDragging ****/\n\n    function continueDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (\n        (originalEvent.screenX === 0) && (originalEvent.screenY === 0) &&\n        ! PositioningWasDelayed\n      ) {\n        PositioningWasDelayed = true // last \"drag\" event contains wrong coord.s\n      } else {\n        PositioningWasDelayed = false\n\n        performPanningFor(\n          'draggable',\n          Element, Options, originalEvent.pageX,originalEvent.pageY\n        )\n\n        let relativePosition = Conversion.fromDocumentTo(\n          'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n        )                                       // relative to reference element\n\n        let x  = relativePosition.left + ReferenceDeltaX  // in user coordinates\n        let y  = relativePosition.top  + ReferenceDeltaY\n\n        x = constrained(x, Options.minX,Options.maxX)\n        y = constrained(y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x         // calculated AFTER constraining x,y\n        let dy = y - lastPosition.y                                      // dto.\n\n        lastPosition = { x,y }\n\n        invokeHandler('onDragMove', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      if (Context.currentDropZoneElement === lastDropZoneElement) {\n        if (Context.currentDropZoneElement != null) {\n          invokeHandler(\n            'onDropZoneHover', Options,\n            (Context.currentDropZonePosition as Position).x,(Context.currentDropZonePosition as Position).y,\n            Context.currentDropZoneExtras, Options.Extras\n          )\n        }\n      } else {\n        if (Context.currentDropZoneElement == null) {\n          Element.classList.remove('droppable')\n          invokeHandler('onDropZoneLeave', Options, lastDropZoneExtras, Options.Extras)\n        } else {\n          Element.classList.add('droppable')\n          invokeHandler(\n            'onDropZoneEnter', Options,\n            (Context.currentDropZonePosition as Position).x,(Context.currentDropZonePosition as Position).y,\n            lastDropZoneExtras, Options.Extras\n          )\n        }\n\n        lastDropZoneElement = Context.currentDropZoneElement as HTMLElement\n        lastDropZoneExtras  = Context.currentDropZoneExtras\n      }\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** finishDragging ****/\n\n    function finishDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n//    continueDragging(originalEvent)           // NO! positions might be wrong!\n\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (Context.DroppableWasDropped) {\n        invokeHandler(\n          'onDropped', Options,\n          (Context.currentDropZonePosition as Position).x,(Context.currentDropZonePosition as Position).y,\n          Context.currentDropOperation, Context.currentTypeTransferred, Context.currentDataTransferred,\n          Context.currentDropZoneExtras, Options.Extras\n        )\n\n        Context.currentDropZoneExtras   = undefined\n        Context.currentDropZonePosition = undefined\n        Context.currentDropZoneElement  = undefined\n\n        Context.DroppableWasDropped     = false\n        Context.currentDropOperation    = undefined\n        Context.currentTypeTransferred  = undefined\n        Context.currentDataTransferred  = undefined\n      }\n\n      if (Options.onDragEnd != null) {\n        let x = constrained(lastPosition.x, Options.minX,Options.maxX)\n        let y = constrained(lastPosition.y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x\n        let dy = y - lastPosition.y\n\n        invokeHandler('onDragEnd', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      Context.currentDroppableExtras = undefined\n\n      isDragged = false\n      Element.classList.remove('dragged','droppable')\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** updateDraggableOptions ****/\n\n    function updateDraggableOptions (Options:any):void {\n      Options = parsedDraggableOptions(Options)\n\n      if (\n        (currentDraggableOptions.Extras == null) && (Options.Extras != null)\n      ) {\n        currentDraggableOptions.Extras = Options.Extras\n      }           // Extras may be set with delay, but remain constant afterwards\n\n      currentDraggableOptions.Dummy = (\n        Options.Dummy || currentDraggableOptions.Dummy\n      )\n\n      currentDraggableOptions.minX = Options.minX\n      currentDraggableOptions.minY = Options.minY\n      currentDraggableOptions.maxX = Options.maxX\n      currentDraggableOptions.maxY = Options.maxY\n\n      currentDraggableOptions.Pannable        = Options.Pannable\n      currentDraggableOptions.PanSensorWidth  = Options.PanSensorWidth\n      currentDraggableOptions.PanSensorHeight = Options.PanSensorHeight\n      currentDraggableOptions.PanSpeed        = Options.PanSpeed\n\n      currentDraggableOptions.onDragStart = (\n        Options.onDragStart || currentDraggableOptions.onDragStart\n      )           // may be used to update initial position for subsequent drags\n    }\n\n  /**** updateDroppableOptions ****/\n\n    function updateDroppableOptions (Options:any):void {\n      Options = parsedDroppableOptions(Options)\n\n      currentDroppableOptions.Operations  = Options.Operations\n      currentDroppableOptions.DataToOffer = Options.DataToOffer\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragstart', startDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drag',      continueDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragend',   finishDragging)\n\n    return {\n      update:(Options:any) => {\n        updateDraggableOptions(Options)\n        updateDroppableOptions(Options)\n      }\n    }\n  }\n\n//-------------------------------------------------------------------------------\n//--                 use:asDropZone={options} - for drop zones                 --\n//-------------------------------------------------------------------------------\n\n  export type TypeAcceptanceSet = { [Type:string]:string }\n                   // values consist of 'copy', 'move', 'link' (blank-separated)\n  type DropZoneOptions = {\n    Extras?:any,\n    TypesToAccept?:TypeAcceptanceSet,\n    HoldDelay?:number,\n    Pannable?:string|'this'|HTMLElement|SVGElement,\n    PanSensorWidth?:number, PanSensorHeight?:number, PanSpeed?:number,\n    onDroppableEnter?:(x:number,y:number, Operation:DropOperation, offeredTypeList:string[],\n                        DroppableExtras:any, DropZoneExtras:any) => boolean|undefined,\n    onDroppableMove?: (x:number,y:number, Operation:DropOperation, offeredTypeList:string[],\n                        DroppableExtras:any, DropZoneExtras:any) => boolean|undefined,\n    onDroppableHold?: (x:number,y:number, DroppableExtras:any, DropZoneExtras:any) => void,\n    onDroppableLeave?:(DroppableExtras:any, DropZoneExtras:any) => void,\n    onDrop?:          (x:number,y:number, Operation:DropOperation, DataOffered:any,\n                        DroppableExtras:any, DropZoneExtras:any) => string | undefined,\n  }\n\n/**** parsedDropZoneOptions ****/\n\n  function parsedDropZoneOptions (Options:any):DropZoneOptions {\n    Options = allowedPlainObject('drop zone options',Options) || {}\n\n    let Extras:any, TypesToAccept:TypeAcceptanceSet, HoldDelay:number\n    let Pannable:string|'this'|HTMLElement|SVGElement|undefined\n    let PanSensorWidth:number, PanSensorHeight:number, PanSpeed:number\n    let onDroppableEnter:Function, onDroppableMove:Function, onDroppableLeave:Function\n    let onDroppableHold:Function, onDroppableRelease:Function, onDrop:Function\n\n    Extras = Options.Extras\n\n    allowPlainObject('data types to be accepted',Options.TypesToAccept)\n    TypesToAccept = Object.create(null)\n      if ((Options.TypesToAccept != null) && ('none' in Options.TypesToAccept)) throwError(\n        'InvalidArgument: \"none\" is not a valid data type'\n      )\n\n      for (let Type in Options.TypesToAccept) {\n        if (Options.TypesToAccept.hasOwnProperty(Type)) {\n          TypesToAccept[Type] = parsedOperations(\n            'list of accepted operations for type ' + quoted(Type),\n            Options.TypesToAccept[Type]\n          )\n        }\n      }\n    HoldDelay = allowedIntegerInRange('min. time to hold',Options.HoldDelay, 0) as number\n\n    switch (true) {\n      case (Options.Pannable == null):\n        Pannable = undefined; break\n      case (Options.Pannable === 'this'):\n      case ValueIsNonEmptyString(Options.Pannable):\n      case (Options.Pannable instanceof HTMLElement):\n      case (Options.Pannable instanceof SVGElement):\n//    case (Options.Pannable instanceof MathMLElement):\n        Pannable = Options.Pannable; break\n      default: throwError(\n        'InvalidArgument: invalid \"Pannable\" specification given'\n      )\n    }\n\n    PanSensorWidth  = allowedOrdinal ('panning sensor width',Options.PanSensorWidth)\n      if (PanSensorWidth  == null) { PanSensorWidth = 20 }\n    PanSensorHeight = allowedOrdinal('panning sensor height',Options.PanSensorHeight)\n      if (PanSensorHeight == null) { PanSensorHeight = 20 }\n    PanSpeed        = allowedOrdinal        ('panning speed',Options.PanSpeed)\n      if (PanSpeed == null) { PanSpeed = 10 }\n\n    onDroppableEnter   = allowedFunction('\"onDroppableEnter\" handler',  Options.onDroppableEnter)\n    onDroppableMove    = allowedFunction('\"onDroppableMove\" handler',   Options.onDroppableMove)\n    onDroppableLeave   = allowedFunction('\"onDroppableLeave\" handler',  Options.onDroppableLeave)\n    onDroppableHold    = allowedFunction('\"onDroppableHold\" handler',   Options.onDroppableHold)\n    onDroppableRelease = allowedFunction('\"onDroppableRelease\" handler',Options.onDroppableRelease)\n    onDrop             = allowedFunction('\"onDrop\" handler',            Options.onDrop)\n\n    return {\n      Extras, TypesToAccept, HoldDelay,\n      Pannable, PanSensorWidth,PanSensorHeight, PanSpeed,\n// @ts-ignore we cannot validate given functions any further\n      onDroppableEnter, onDroppableMove, onDroppableLeave,\n// @ts-ignore we cannot validate given functions any further\n      onDroppableHold, onDroppableRelease, onDrop,\n    }\n  }\n\n/**** use:asDropZone={options} ****/\n\n  export function asDropZone (\n    Element:HTMLElement|SVGElement, Options:DropZoneOptions\n  ) {\n    let currentDropZoneOptions:DropZoneOptions\n\n    currentDropZoneOptions = parsedDropZoneOptions(Options)\n\n  /**** enteredByDroppable ****/\n\n    function enteredByDroppable (originalEvent:DragEvent) {\n      let Options = currentDropZoneOptions\n\n      performPanningFor(\n        'dropzone',\n        Element, Options, originalEvent.pageX,originalEvent.pageY\n      )\n\n      let DropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      if (\n        ValueIsNumber(Options.HoldDelay) && (Options.HoldDelay as number > 0) &&\n        (Context.HoldWasTriggeredForElement !== Element)\n      ) { startHoldTimer(DropZonePosition) }\n\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none')\n      ) { return }\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) &&\n        (TypesToAccept[Type] !== '')          // \"getData\" is not available here\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) { return }\n\n      let accepted:boolean|undefined = ResultOfHandler(\n        'onDroppableEnter', Options,\n        DropZonePosition.x, DropZonePosition.y,\n        wantedOperation, offeredTypeList, Context.currentDroppableExtras, Options.Extras\n      )\n\n      if (accepted === false) {         // i.e. explicit \"false\" result required\n        return\n      } else {\n        Context.currentDropZoneExtras   = Options.Extras\n        Context.currentDropZoneElement  = Element\n        Context.currentDropZonePosition = DropZonePosition\n\n        Element.classList.add('hovered')\n\n        originalEvent.preventDefault()\n        originalEvent.stopPropagation()\n      }\n    }\n\n  /**** hoveredByDroppable ****/\n// warning: I've already seen leftByDroppable followed by hoveredByDropable!\n\n    function hoveredByDroppable (originalEvent:DragEvent) {\n      let Options = currentDropZoneOptions\n\n      performPanningFor(\n        'dropzone',\n        Element, Options, originalEvent.pageX,originalEvent.pageY\n      )\n\n      let DropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      if (\n        ValueIsNumber(Options.HoldDelay) && (Options.HoldDelay as number > 0) &&\n        (Context.HoldWasTriggeredForElement !== Element)\n      ) {\n        if (Context.HoldPosition == null) {           // see above for reasoning\n          startHoldTimer(DropZonePosition)\n        } else {\n          continueHoldTimer(DropZonePosition)\n        }\n      }\n\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none') ||\n        (Context.currentDropZoneElement != null) && (Context.currentDropZoneElement !== Element)\n      ) {\n        Element.classList.remove('hovered')\n        return\n      }\n\n// in some browsers, it may be that (currentDropZone !== Element)!\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) &&\n        (TypesToAccept[Type] !== '')          // \"getData\" is not available here\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) {\n        if (Context.currentDropZoneElement === Element) {\n          Context.currentDropZoneExtras   = undefined\n          Context.currentDropZoneElement  = undefined\n          Context.currentDropZonePosition = undefined\n        }\n\n        Element.classList.remove('hovered')\n        return\n      }\n\n      Context.currentDropZonePosition = DropZonePosition\n\n      let accepted = ResultOfHandler(\n        'onDroppableMove', Options,\n        Context.currentDropZonePosition.x, Context.currentDropZonePosition.y,\n        wantedOperation, offeredTypeList, Context.currentDroppableExtras, Options.Extras\n      )\n\n      if (accepted === false) {         // i.e. explicit \"false\" result required\n        Context.currentDropZoneExtras   = undefined\n        Context.currentDropZoneElement  = undefined\n        Context.currentDropZonePosition = undefined\n\n        Element.classList.remove('hovered')\n      } else {              // warning: sometimes (currentDropZone !== Element)!\n        Context.currentDropZoneExtras   = Options.Extras\n        Context.currentDropZoneElement  = Element\n//      Context.currentDropZonePosition has already been set before\n\n        Element.classList.add('hovered')\n\n        originalEvent.preventDefault()            // never allow default action!\n//      originalEvent.stopPropagation()\n\n        return false          // special return value when drop seems acceptable\n      }\n    }\n\n  /**** leftByDroppable ****/\n\n    function leftByDroppable (originalEvent:DragEvent) {\n      Element.classList.remove('hovered')\n      Context.DropZonePanning = false\n\n      stopHoldTimer()\n\n      let Options = currentDropZoneOptions\n\n      if (Context.currentDropZoneElement === Element) {\n        if (Context.currentTypeTransferred == null) {   // see explanation below\n          Context.currentDropZoneExtras   = undefined\n          Context.currentDropZoneElement  = undefined\n\n          Context.DroppableWasDropped     = false\n          Context.currentDropZonePosition = undefined\n          Context.currentTypeTransferred  = undefined\n          Context.currentDataTransferred  = undefined\n\n          invokeHandler('onDroppableLeave', Options, Context.currentDroppableExtras, Options.Extras)\n        }                   // swallow \"dragleave\" right after successful \"drop\"\n\n        originalEvent.preventDefault()\n        originalEvent.stopPropagation()\n      }\n    }\n\n  /**** droppedByDroppable ****/\n\n    function droppedByDroppable (originalEvent:DragEvent) {\n      Element.classList.remove('hovered')\n      Context.DropZonePanning = false\n\n      stopHoldTimer()\n\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none') ||\n        (Context.currentDropZoneElement !== Element)\n      ) { return }\n\n//    originalEvent.preventDefault()\n      originalEvent.stopPropagation()\n\n      let Options = currentDropZoneOptions\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) && (\n          (wantedOperation == null) ||\n          (TypesToAccept[Type].indexOf(wantedOperation) >= 0)\n        )\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) {\n        Context.currentDropZoneExtras   = undefined\n        Context.currentDropZonePosition = undefined\n\n        Context.DroppableWasDropped     = false\n        Context.currentDropOperation    = undefined\n        Context.currentTypeTransferred  = undefined\n        Context.currentDataTransferred  = undefined\n\n        invokeHandler('onDroppableLeave', Options, Context.currentDroppableExtras, Options.Extras)\n\n        return\n      }\n\n      Context.currentDropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      let offeredData:any = {}\n        offeredTypeList.forEach(\n// @ts-ignore originalEvent.dataTransfer definitely exists\n          (Type) => offeredData[Type] = originalEvent.dataTransfer.getData(Type)\n        )\n      let acceptedType = ResultOfHandler(\n        'onDrop', Options,\n        Context.currentDropZonePosition.x, Context.currentDropZonePosition.y,\n        wantedOperation, offeredData, Context.currentDroppableExtras, Options.Extras\n      )\n\n      switch (true) {\n        case (acceptedType == null):\n          Context.DroppableWasDropped    = true\n          Context.currentDropOperation   = wantedOperation\n          Context.currentTypeTransferred = undefined\n          Context.currentDataTransferred = undefined\n          break\n        case ValueIsOneOf(acceptedType,offeredTypeList):\n          Context.DroppableWasDropped    = true\n          Context.currentDropOperation   = wantedOperation\n          Context.currentTypeTransferred = acceptedType\n          Context.currentDataTransferred = offeredData[acceptedType]\n          break\n        default:               // handler should return false in case of failure\n          Context.DroppableWasDropped     = false\n          Context.currentDropZoneExtras   = undefined\n          Context.currentDropZonePosition = undefined\n          Context.currentDropOperation    = undefined\n          Context.currentTypeTransferred  = undefined\n          Context.currentDataTransferred  = undefined\n\n//        invokeHandler('onDroppableLeave', Options, currentDroppableExtras, Options.Extras)\n      }\n\n      Context.currentDropZoneElement = undefined\n    }\n\n  /**** startHoldTimer ****/\n\n    function startHoldTimer (DropZonePosition:Position):void {\n      Context.HoldPosition = DropZonePosition\n\n      if (Context.HoldTimer != null) {\n        clearTimeout(Context.HoldTimer)\n      }\n      Context.HoldTimer    = setTimeout(triggerHold, Options.HoldDelay)\n    }\n\n  /**** continueHoldTimer ****/\n\n    function continueHoldTimer (DropZonePosition:Position):void {\n      let Offset = (\n        ((Context.HoldPosition as Position).x-DropZonePosition.x)**2 +\n        ((Context.HoldPosition as Position).y-DropZonePosition.y)**2\n      )\n      if (Offset > 25) {\n        Context.HoldPosition = DropZonePosition\n\n        clearTimeout(Context.HoldTimer)\n        Context.HoldTimer = setTimeout(triggerHold, Options.HoldDelay)\n      }\n    }\n\n  /**** stopHoldTimer ****/\n\n    function stopHoldTimer () {\n      delete Context.HoldPosition\n\n      if (Context.HoldTimer != null) {\n        clearTimeout(Context.HoldTimer)\n        delete Context.HoldTimer\n      }\n\n      delete Context.HoldWasTriggeredForElement\n    }\n\n  /**** triggerHold ****/\n\n    function triggerHold () {\n      let DropZonePosition = (    // sometimes, there is no \"enteredByDroppable\"\n        Context.currentDropZonePosition || Context.HoldPosition\n      )\n\n      delete Context.HoldPosition\n      delete Context.HoldTimer\n\n      Context.HoldWasTriggeredForElement = Element\n\n      invokeHandler(\n        'onDroppableHold', Options,\n        (DropZonePosition as Position).x, (DropZonePosition as Position).y,\n        Context.currentDroppableExtras, Options.Extras\n      )\n    }\n\n  /**** updateDropZoneOptions ****/\n\n    function updateDropZoneOptions (Options:any):void {\n      Options = parsedDropZoneOptions(Options)\n\n      if (\n        (currentDropZoneOptions.Extras == null) && (Options.Extras != null)\n      ) {\n        currentDropZoneOptions.Extras = Options.Extras\n      }           // Extras may be set with delay, but remain constant afterwards\n\n      currentDropZoneOptions.TypesToAccept = Options.TypesToAccept\n\n      currentDropZoneOptions.HoldDelay = Options.HoldDelay\n\n      currentDropZoneOptions.Pannable        = Options.Pannable\n      currentDropZoneOptions.PanSensorWidth  = Options.PanSensorWidth\n      currentDropZoneOptions.PanSensorHeight = Options.PanSensorHeight\n      currentDropZoneOptions.PanSpeed        = Options.PanSpeed\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragenter', enteredByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragover',  hoveredByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragleave', leftByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drop',      droppedByDroppable)\n\n    return { update:updateDropZoneOptions }\n  }\n\n/**** ValueIsPosition ****/\n\n  function ValueIsPosition (Candidate:any):boolean {\n    return (\n      ValueIsPlainObject(Candidate) &&\n      ValueIsFiniteNumber(Candidate.x) && ValueIsFiniteNumber(Candidate.y)\n    )\n  }\n\n/**** asPosition ****/\n\n  function asPosition (Value:any):Position {\n    return { x:Value.left, y:Value.top }\n  }\n\n/**** PositionReferenceFor ****/\n\n  function PositionReferenceFor (\n    Element:HTMLElement|SVGElement,\n    Options:DraggableOptions|DroppableOptions\n  ):Element {\n    let PositionReference:Element | undefined | null\n      switch (true) {\n        case (Options.relativeTo === 'parent'):\n          PositionReference = Element.parentElement\n          break\n        case (Options.relativeTo === 'body'):\n          PositionReference = document.body\n          break\n        case (Options.relativeTo instanceof HTMLElement):\n        case (Options.relativeTo instanceof SVGElement):\n  //    case (Options.relativeTo instanceof MathMLElement):\n          PositionReference = Options.relativeTo as Element\n          if (\n            (PositionReference != document.body) &&\n            ! document.body.contains(PositionReference)\n          ) throwError(\n            'InvalidArgument: the HTML element given as \"relativeTo\" option ' +\n            'is not part of this HTML document'\n          )\n          break\n        default:                                                 // CSS selector\n          PositionReference = Element.closest(Options.relativeTo as string)\n      }\n    return (PositionReference == null ? document.body : PositionReference)\n  }\n\n/**** DragImageFor ****/\n\n  function DragImageFor (\n    Element:HTMLElement|SVGElement,\n    Options:DraggableOptions|DroppableOptions\n  ):Element|undefined {\n    switch (true) {\n      case (Options.Dummy === 'standard'):\n        return undefined\n      case (Options.Dummy === 'none'):\n        let invisibleDragImage = document.createElement('div')\n          invisibleDragImage.setAttribute('style',\n            'display:block; position:absolute; width:1px; height:1px; ' +\n            'background:transparent; border:none; margin:0px; padding:0px; ' +\n            'cursor:auto'\n          )\n          document.body.appendChild(invisibleDragImage)\n        return invisibleDragImage\n      case ValueIsNonEmptyString(Options.Dummy):          // may flicker shortly\n        let auxiliaryElement = document.createElement('div')\n          auxiliaryElement.style.display  = 'block'\n          auxiliaryElement.style.position = 'absolute'\n          auxiliaryElement.style.left     = (document.body.scrollWidth + 100)+'px'\n\n          document.body.appendChild(auxiliaryElement)\n\n          auxiliaryElement.innerHTML = Options.Dummy as string\n        return auxiliaryElement.children[0]\n      case (Options.Dummy instanceof HTMLElement):\n      case (Options.Dummy instanceof SVGElement):\n//    case (Options.Dummy instanceof MathMLElement):\n        return Options.Dummy as Element\n      case ValueIsFunction(Options.Dummy):\n        let Candidate:HTMLElement | SVGElement | undefined = undefined\n        try {\n          Candidate = (Options.Dummy as Function)(Options.Extras, Element)\n        } catch (Signal) {\n          console.error('RuntimeError: creating draggable dummy failed',Signal)\n        }\n\n        if (Candidate != null) {\n          if ((Candidate instanceof HTMLElement) || (Candidate instanceof SVGElement)) {\n            return Candidate\n          } else {\n            console.error(\n              'InvalidArgument: the newly created draggable dummy is ' +\n              'neither an HTML nor an SVG element'\n            )\n          }\n        }\n    }\n  }\n\n  /**** performPanningFor ****/\n\n    function performPanningFor (\n      Type:'draggable'|'dropzone',\n      Element:HTMLElement | SVGElement, Options:DraggableOptions,\n      xOnPage:number,yOnPage:number\n    ):void {\n      if ((Type === 'draggable') && Context.DropZonePanning) { return }\n\n      if (\n        (Options.Pannable == null) ||\n        ((Options.PanSensorWidth === 0) && (Options.PanSensorHeight === 0)) ||\n        (Options.PanSpeed === 0)\n      ) { Context.DropZonePanning = false; return }\n\n      let pannableElement:Element|undefined|null\n        switch (true) {\n          case ValueIsNonEmptyString(Options.Pannable):\n            pannableElement = Element.parentElement\n            if (pannableElement != null) {\n              pannableElement = pannableElement.closest(Options.Pannable as string)\n            }\n            break\n          case (Options.Pannable === 'this') && (Type === 'dropzone'):\n            pannableElement = Element\n            break\n          case (Options.Pannable instanceof HTMLElement):\n          case (Options.Pannable instanceof SVGElement):\n//        case (Options.Pannable instanceof MathMLElement):\n            pannableElement = Options.Pannable as HTMLElement\n        }\n      if (pannableElement == null) { Context.DropZonePanning = false; return }\n\n      let { left:xInPannable, top:yInPannable } = Conversion.fromDocumentTo(\n        'local', { left:xOnPage, top:yOnPage }, pannableElement\n      )\n\n      if ((xInPannable >= 0) && (xInPannable < (Options.PanSensorWidth as number))) {\n        pannableElement.scrollLeft = Math.max(\n          0,pannableElement.scrollLeft - (Options.PanSpeed as number)\n        )\n      }\n\n      let PannableWidth = pannableElement.clientWidth           // w/o scrollbar\n      if (\n        (xInPannable >= PannableWidth-(Options.PanSensorWidth as number)) &&\n        (xInPannable < PannableWidth)\n      ) {\n        pannableElement.scrollLeft = Math.min(\n          pannableElement.scrollLeft + (Options.PanSpeed as number),\n          pannableElement.scrollWidth-PannableWidth\n        )\n      }\n\n      if ((yInPannable >= 0) && (yInPannable < (Options.PanSensorHeight as number))) {\n        pannableElement.scrollTop = Math.max(\n          0,pannableElement.scrollTop - (Options.PanSpeed as number)\n        )\n      }\n\n      let PannableHeight = pannableElement.clientHeight         // w/o scrollbar\n      if (\n        (yInPannable >= PannableHeight-(Options.PanSensorHeight as number)) &&\n        (yInPannable < PannableHeight)\n      ) {\n        pannableElement.scrollTop = Math.min(\n          pannableElement.scrollTop + (Options.PanSpeed as number),\n          pannableElement.scrollHeight-PannableHeight\n        )\n      }\n\n      Context.DropZonePanning = (Type === 'dropzone')\n    }\n\n/**** parsedOperations ****/\n\n  function parsedOperations (\n    Description:string, Argument:any, Default:string='copy move link'\n  ):string {\n    let Operations = allowedString(Description,Argument) || Default\n\n    switch (Operations.trim()) {\n      case 'all':  return 'copy move link'\n      case 'none': return ''\n    }\n\n    let OperationList = Operations.trim().replace(/\\s+/g,' ').split(' ')\n      allowListSatisfying(\n        Description,OperationList,\n        (Operation:string) => ValueIsOneOf(Operation,DropOperations)\n      )\n    return OperationList.reduce(\n      (Result:string, Operation:string) => (\n        Result.indexOf(Operation) < 0 ? Result + Operation + ' ': Result\n      ),' '\n    )\n  }\n\n/**** allowedEffectsFrom ****/\n\n  type allowedEffects = (\n    'none'|'copy'|'copyLink'|'copyMove'|'link'|'linkMove'|'move'|'all'\n  )\n\n  function allowedEffectsFrom (Operations:string):allowedEffects {\n    let EffectIndex = (                                       // Horner's method\n      (Operations.indexOf('move') < 0 ? 0 : 1) * 2 +\n      (Operations.indexOf('link') < 0 ? 0 : 1)\n    ) * 2 +\n    (Operations.indexOf('copy') < 0 ? 0 : 1)\n\n    return [\n      'none','copy','link','copyLink','move','copyMove','linkMove','all'\n    ][EffectIndex] as allowedEffects\n  }\n\n/**** invokeHandler ****/\n\n  function invokeHandler (Name:string, Options:any, ...Arguments:any):any {\n    if (Options[Name] != null) {\n      try {\n        return Options[Name].apply(null,Arguments)\n      } catch (Signal) {\n        console.error(quoted(Name) + ' handler failed',Signal)\n      }\n    }\n  }\n  const ResultOfHandler = invokeHandler\n\n\n"],"names":[],"mappings":"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"}