{"version":3,"file":"svelte-drag-and-drop-actions.js","sources":["../src/svelte-drag-and-drop-actions.ts"],"sourcesContent":["//----------------------------------------------------------------------------//\n//                        Svelte Drag-and-Drop Actions                        //\n//----------------------------------------------------------------------------//\n\n  import {\n    throwError,\n    ValueIsFiniteNumber, ValueIsString, ValueIsNonEmptyString,\n    ValueIsFunction, ValueIsPlainObject, ValueIsOneOf,\n    allowedFiniteNumber, allowedIntegerInRange, allowedString, allowedNonEmptyString,\n    allowPlainObject, allowedPlainObject,\n    allowListSatisfying, allowedFunction,\n    ObjectIsNotEmpty, quoted, constrained\n  } from 'javascript-interface-library'\n\n  import Conversion from 'svelte-coordinate-conversion'\n\n//-------------------------------------------------------------------------------\n//--             use:asDraggable={options} - \"drag\" without \"drop\"             --\n//-------------------------------------------------------------------------------\n\n  export type PositionReference = (\n    'parent' | 'body' | string | HTMLElement | SVGElement // | MathMLElement\n  )\n\n  export type Position = { x:number, y:number }\n\n  export type DragDummy = (\n    string | HTMLElement | SVGElement | // MathMLElement |\n    ((DraggableExtras:any, Element:HTMLElement|SVGElement) => HTMLElement|SVGElement) |\n    'standard' | 'none'\n  ) | null | undefined\n\n  type DraggableOptions = {\n    Extras?:any,\n    relativeTo?:PositionReference, onlyFrom?:string, neverFrom?:string,\n    Dummy?:DragDummy, DummyOffsetX?:number, DummyOffsetY?:number,\n    minX?:number, minY?:number, maxX?:number, maxY?:number,\n    onDragStart?:Position | ((DraggableExtras:any) => Position),\n    onDragMove?: (x:number,y:number, dx:number,dy:number, DraggableExtras:any) => void,\n    onDragEnd?:  (x:number,y:number, dx:number,dy:number, DraggableExtras:any) => void,\n  }\n\n/**** parsedDraggableOptions ****/\n\n  function parsedDraggableOptions (Options:any):DraggableOptions {\n    Options = allowedPlainObject('drag options',Options) || {}\n\n    let Extras:any, relativeTo:PositionReference\n    let onlyFrom:string|undefined, neverFrom:string|undefined\n    let Dummy:DragDummy, DummyOffsetX:number, DummyOffsetY:number\n    let minX:number, minY:number, maxX:number, maxY:number\n    let onDragStart:Function, onDragMove:Function, onDragEnd:Function, onDragCancel:Function\n\n    Extras = Options.Extras\n\n    switch (true) {\n      case (Options.relativeTo == null):\n        relativeTo = 'parent'; break\n      case (Options.relativeTo === 'parent'):\n      case (Options.relativeTo === 'body'):\n      case ValueIsNonEmptyString(Options.relativeTo):\n      case (Options.relativeTo instanceof HTMLElement):\n      case (Options.relativeTo instanceof SVGElement):\n//    case (Options.relativeTo instanceof MathMLElement):\n        relativeTo = Options.relativeTo as PositionReference; break\n      default: throwError(\n        'InvalidArgument: invalid position reference given'\n      )\n    }\n\n    onlyFrom  = allowedNonEmptyString ('\"onlyFrom\" CSS selector',Options.onlyFrom)\n    neverFrom = allowedNonEmptyString('\"neverFrom\" CSS selector',Options.neverFrom)\n\n    switch (true) {\n      case (Options.Dummy == null):\n        Dummy = undefined; break\n      case (Options.Dummy === 'standard'):\n      case (Options.Dummy === 'none'):\n      case ValueIsNonEmptyString(Options.Dummy):\n      case (Options.Dummy instanceof HTMLElement):\n      case (Options.Dummy instanceof SVGElement):\n//    case (Options.Dummy instanceof MathMLElement):\n      case ValueIsFunction(Options.Dummy):\n        Dummy = Options.Dummy as DragDummy; break\n      default: throwError(\n        'InvalidArgument: invalid drag dummy specification given'\n      )\n    }\n\n    DummyOffsetX = allowedFiniteNumber('dummy x offset',Options.DummyOffsetX)\n    DummyOffsetY = allowedFiniteNumber('dummy y offset',Options.DummyOffsetY)\n\n    minX = allowedFiniteNumber('min. x position',Options.minX)\n      if (minX == null) { minX = -Infinity }\n    minY = allowedFiniteNumber('min. y position',Options.minY)\n      if (minY == null) { minY = -Infinity }\n    maxX = allowedFiniteNumber('max. x position',Options.maxX)\n      if (maxX == null) { maxX = Infinity }\n    maxY = allowedFiniteNumber('max. y position',Options.maxY)\n      if (maxY == null) { maxY = Infinity }\n\n    if (ValueIsPosition(Options.onDragStart)) {\n      let { x,y } = Options.onDragStart as Position\n      onDragStart = () => ({x,y})\n    } else {\n      onDragStart = allowedFunction('\"onDragStart\" handler', Options.onDragStart)\n    }\n\n    onDragMove = allowedFunction('\"onDragMove\" handler', Options.onDragMove)\n    onDragEnd  = allowedFunction('\"onDragEnd\" handler',  Options.onDragEnd)\n\n    return {\n      Extras, relativeTo, onlyFrom,neverFrom, Dummy, DummyOffsetX,DummyOffsetY,\n      minX,minY, maxX,maxY,\n// @ts-ignore we cannot validate given functions any further\n      onDragStart, onDragMove, onDragEnd, onDragCancel\n    }\n  }\n\n/**** use:asDraggable={options} ****/\n\n  export function asDraggable (\n    Element:HTMLElement|SVGElement, Options:DraggableOptions\n  ) {\n    let isDragged:boolean\n    let currentDraggableOptions:DraggableOptions\n\n    let PositionReference:Element         // element with user coordinate system\n    let ReferenceDeltaX:number, ReferenceDeltaY:number  // mouse -> user coord.s\n    let PositioningWasDelayed:boolean // workaround for prob. with \"drag\" events\n    let DragImage:Element | undefined\n    let initialPosition:Position                    // given in user coordinates\n    let lastPosition:   Position                                         // dto.\n\n    isDragged = false\n\n    currentDraggableOptions = parsedDraggableOptions(Options)\n\n  /**** startDragging ****/\n\n    function startDragging (originalEvent:DragEvent) {\n      let Options = currentDraggableOptions\n\n      if (fromForbiddenElement(Element,Options,originalEvent)) {\n        originalEvent.stopPropagation()\n        originalEvent.preventDefault()\n        return false\n      }\n\n      PositionReference = PositionReferenceFor(Element,Options)\n\n      let relativePosition = Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n      )                                         // relative to reference element\n\n      ReferenceDeltaX = ReferenceDeltaY = 0; initialPosition = { x:0,y:0 }\n      if (Options.onDragStart == null) {\n        initialPosition = { x:0,y:0 }               // given in user coordinates\n      } else {\n        try {\n          let StartPosition = (Options.onDragStart as Function)(Options.Extras)\n          if (ValueIsPlainObject(StartPosition)) {\n            let x = allowedFiniteNumber('x start position',StartPosition.x)\n            let y = allowedFiniteNumber('y start position',StartPosition.y)\n\n            ReferenceDeltaX = x - relativePosition.left\n            ReferenceDeltaY = y - relativePosition.top\n\n            x = constrained(x, Options.minX,Options.maxX)\n            y = constrained(y, Options.minY,Options.maxY)\n\n            initialPosition = { x,y }               // given in user coordinates\n          }\n        } catch (Signal) {\n          console.error('\"onDragStart\" handler failed',Signal)\n        }\n      }\n\n      lastPosition = initialPosition\n\n      PositioningWasDelayed = false                    // initializes workaround\n\n      if (Options.Dummy == null) {\n        Options.Dummy = 'none'      // this is the default for \"use.asDraggable\"\n      }\n\n      DragImage = DragImageFor(Element,Options)\n      if ((DragImage != null) && (originalEvent.dataTransfer != null)) {\n        let OffsetX = Options.DummyOffsetX as number\n        let OffsetY = Options.DummyOffsetY as number\n\n        if ((OffsetX == null) || (OffsetY == null)) {\n          let PositionInDraggable = Conversion.fromDocumentTo(\n            'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n          )\n\n          if (OffsetX == null) { OffsetX = PositionInDraggable.left }\n          if (OffsetY == null) { OffsetY = PositionInDraggable.top }\n        }\n\n        switch (true) {\n          case (Options.Dummy === 'none'):\n            originalEvent.dataTransfer.setDragImage(DragImage,0,0)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(DragImage as HTMLElement)\n            },0)\n            break\n          case ValueIsString(Options.Dummy):\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(\n                (DragImage as HTMLElement).parentElement as HTMLElement\n              )\n            },0)\n            break\n          default:\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n        }\n      }\n\n      if (originalEvent.dataTransfer != null) {\n        originalEvent.dataTransfer.effectAllowed = 'none'\n      }\n\n      isDragged = true\n      setTimeout(() => Element.classList.add('dragged'), 0)\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** continueDragging ****/\n\n    function continueDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n      let Options = currentDraggableOptions\n\n      if (\n        (originalEvent.screenX === 0) && (originalEvent.screenY === 0) &&\n        ! PositioningWasDelayed\n      ) {\n        PositioningWasDelayed = true // last \"drag\" event contains wrong coord.s\n      } else {\n        PositioningWasDelayed = false\n\n        let relativePosition = Conversion.fromDocumentTo(\n          'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n        )                                       // relative to reference element\n\n        let x  = relativePosition.left + ReferenceDeltaX  // in user coordinates\n        let y  = relativePosition.top  + ReferenceDeltaY\n\n        x = constrained(x, Options.minX,Options.maxX)\n        y = constrained(y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x         // calculated AFTER constraining x,y\n        let dy = y - lastPosition.y                                      // dto.\n\n        lastPosition = { x,y }\n\n        invokeHandler('onDragMove', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** finishDragging ****/\n\n    function finishDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n//    continueDragging(originalEvent)           // NO! positions might be wrong!\n\n      let Options = currentDraggableOptions\n\n      if (Options.onDragEnd != null) {\n        let x = constrained(lastPosition.x, Options.minX,Options.maxX)\n        let y = constrained(lastPosition.y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x\n        let dy = y - lastPosition.y\n\n        invokeHandler('onDragEnd', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      isDragged = false\n      Element.classList.remove('dragged')\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** updateDraggableOptions ****/\n\n    function updateDraggableOptions (Options:any):void {\n      Options = parsedDraggableOptions(Options)\n\n//    currentDraggableOptions.Extras = Options.Extras // Extras are kept constant\n\n      currentDraggableOptions.Dummy = (\n        Options.Dummy || currentDraggableOptions.Dummy\n      )\n\n      currentDraggableOptions.minX = Options.minX\n      currentDraggableOptions.minY = Options.minY\n      currentDraggableOptions.maxX = Options.maxX\n      currentDraggableOptions.maxY = Options.maxY\n\n      currentDraggableOptions.onDragStart = (\n        Options.onDragStart || currentDraggableOptions.onDragStart\n      )           // may be used to update initial position for subsequent drags\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragstart', startDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drag',      continueDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragend',   finishDragging)\n\n    return { update:updateDraggableOptions }\n  }\n\n/**** fromForbiddenElement ****/\n\n  function fromForbiddenElement (\n    Element:HTMLElement|SVGElement, Options:DraggableOptions,\n    originalEvent:DragEvent\n  ):boolean {\n    if ((Options.onlyFrom != null) || (Options.neverFrom != null)) {\n      let x = originalEvent.clientX\n      let y = originalEvent.clientY\n\n      let touchedElement = document.elementFromPoint(x,y) as HTMLElement\n\n//    elementFromPoint considers elements with \"pointer-events\" <> \"none\" only\n//    but sometimes, \"pointer-events:none\" is needed for proper operation\n\n      touchedElement = innerElementOf(touchedElement, x,y)\n\n      if (Options.onlyFrom != null) {\n        let fromElement = touchedElement.closest(Options.onlyFrom as string)\n        if ((Element !== fromElement) && ! Element.contains(fromElement)) {\n          return true\n        }\n      }\n\n      if (Options.neverFrom != null) {\n        let fromElement = touchedElement.closest(Options.neverFrom as string)\n        if ((Element === fromElement) || Element.contains(fromElement)) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n/**** innerElementOf ****/\n\n  function innerElementOf (Candidate:HTMLElement, x:number,y:number):HTMLElement {\n    let innerElements = Candidate.children\n    for (let i = 0, l = innerElements.length; i < l; i++) {\n      let innerElement = innerElements[i] as HTMLElement\n\n      let Position = Conversion.fromLocalTo(\n        'viewport', { left:0, top:0 }, innerElement\n      )\n      if ((x < Position.left) || (y < Position.top)) { continue }\n\n      if (x > Position.left+innerElement.offsetWidth-1) { continue }\n      if (y > Position.top+innerElement.offsetHeight-1) { continue }\n\n      return innerElementOf(innerElement, x,y)\n    }\n\n    return Candidate               // this is the innermost element at (x,y)\n  }\n\n/**** extended Drag-and-Drop Support ****/\n\n  let currentDroppableExtras:any       // extras for currently dragged droppable\n  let currentDropZoneExtras:any        // extras for currently hovered drop zone\n  let currentDropZoneElement:Element|undefined                // dto. as Element\n\n  let DroppableWasDropped:boolean       // indicates a successful drop operation\n  let currentDropZonePosition:Position|undefined// position relative to DropZone\n  let currentDropOperation:DropOperation|undefined      // actual drop operation\n  let currentTypeTransferred:string|undefined // actual type of transferred data\n  let currentDataTransferred:any                      // actual data transferred\n\n//-------------------------------------------------------------------------------\n//--               use:asDroppable={options} - \"drag\" and \"drop\"               --\n//-------------------------------------------------------------------------------\n\n  export const DropOperations = [ 'copy', 'move', 'link' ]\n  export type  DropOperation  = typeof DropOperations[number]\n\n  export type DataOfferSet = { [Type:string]:string }\n\n  type DroppableOptions = DraggableOptions & {\n    Operations?:string,// consisting of 'copy', 'move', 'link' (blank-separated)\n    DataToOffer?:DataOfferSet,\n    onDropZoneEnter?: (x:number,y:number, DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropZoneHover?: (x:number,y:number, DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropZoneLeave?: (DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropped?:       (x:number,y:number, Operation:DropOperation,\n                        TypeTransferred:string, DataTransferred:any,\n                        DropZoneExtras:any, DroppableExtras:any) => void,\n  }\n\n/**** parsedDroppableOptions ****/\n\n  function parsedDroppableOptions (Options:any):DroppableOptions {\n    Options = allowedPlainObject('drop options',Options) || {}\n\n    let Operations:string, DataToOffer:DataOfferSet\n    let onDropZoneEnter:Function, onDropZoneHover:Function, onDropZoneLeave:Function\n    let onDropped:Function\n\n    Operations  = parsedOperations('list of allowed operations',Options.Operations,'copy')\n    DataToOffer = Object.assign(\n      {}, allowedPlainObject('data to be offered',Options.DataToOffer)\n    )\n\n    onDropZoneEnter = allowedFunction('\"onDropZoneEnter\" handler',Options.onDropZoneEnter)\n    onDropZoneHover = allowedFunction('\"onDropZoneHover\" handler',Options.onDropZoneHover)\n    onDropZoneLeave = allowedFunction('\"onDropZoneLeave\" handler',Options.onDropZoneLeave)\n    onDropped       = allowedFunction('\"onDropped\" handler',      Options.onDropped)\n\n    return {\n      Operations, DataToOffer,\n// @ts-ignore we cannot validate given functions any further\n      onDropZoneEnter, onDropZoneHover, onDropZoneLeave, onDropped\n    }\n  }\n\n/**** use:asDroppable={options} ****/\n\n  export function asDroppable (\n    Element:HTMLElement|SVGElement, Options:DroppableOptions\n  ) {\n    let isDragged:boolean\n    let currentDraggableOptions:DraggableOptions\n    let currentDroppableOptions:DroppableOptions\n\n    let PositionReference:Element         // element with user coordinate system\n    let ReferenceDeltaX:number, ReferenceDeltaY:number  // mouse -> user coord.s\n    let PositioningWasDelayed:boolean // workaround for prob. with \"drag\" events\n    let DragImage:Element | undefined\n    let initialPosition:Position                    // given in user coordinates\n    let lastPosition:   Position                                         // dto.\n\n    let lastDropZoneElement:HTMLElement|SVGElement|undefined\n    let lastDropZoneExtras:any\n\n    isDragged = false\n\n    currentDraggableOptions = parsedDraggableOptions(Options)\n    currentDroppableOptions = parsedDroppableOptions(Options)\n\n  /**** startDragging ****/\n\n    function startDragging (originalEvent:DragEvent) {\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (fromForbiddenElement(Element,Options,originalEvent)) {\n        originalEvent.stopPropagation()\n        originalEvent.preventDefault()\n        return false\n      }\n\n      PositionReference = PositionReferenceFor(Element,Options)\n\n      let relativePosition = Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n      )                                         // relative to reference element\n\n      ReferenceDeltaX = ReferenceDeltaY = 0; initialPosition = { x:0,y:0 }\n      if (Options.onDragStart == null) {\n        initialPosition = { x:0,y:0 }               // given in user coordinates\n      } else {\n        try {\n          let StartPosition = (Options.onDragStart as Function)(Options.Extras)\n          if (ValueIsPlainObject(StartPosition)) {\n            let x = allowedFiniteNumber('x start position',StartPosition.x)\n            let y = allowedFiniteNumber('y start position',StartPosition.y)\n\n            ReferenceDeltaX = x - relativePosition.left\n            ReferenceDeltaY = y - relativePosition.top\n\n            x = constrained(x, Options.minX,Options.maxX)\n            y = constrained(y, Options.minY,Options.maxY)\n\n            initialPosition = { x,y }               // given in user coordinates\n          }\n        } catch (Signal) {\n          console.error('\"onDragStart\" handler failed',Signal)\n        }\n      }\n\n      lastPosition        = initialPosition\n      lastDropZoneElement = undefined\n      lastDropZoneExtras  = undefined\n\n      PositioningWasDelayed = false                    // initializes workaround\n\n      if (Options.Dummy == null) {\n        Options.Dummy = 'standard'  // this is the default for \"use.asDroppable\"\n      }\n\n      DragImage = DragImageFor(Element,Options)\n      if ((DragImage != null) && (originalEvent.dataTransfer != null)) {\n        let OffsetX = Options.DummyOffsetX as number\n        let OffsetY = Options.DummyOffsetY as number\n\n        if ((OffsetX == null) || (OffsetY == null)) {\n          let PositionInDraggable = Conversion.fromDocumentTo(\n            'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n          )\n\n          if (OffsetX == null) { OffsetX = PositionInDraggable.left }\n          if (OffsetY == null) { OffsetY = PositionInDraggable.top }\n        }\n\n        switch (true) {\n          case (Options.Dummy === 'none'):\n            originalEvent.dataTransfer.setDragImage(DragImage,0,0)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(DragImage as HTMLElement)\n            },0)\n            break\n          case ValueIsString(Options.Dummy):\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(\n                (DragImage as HTMLElement).parentElement as HTMLElement\n              )\n            },0)\n            break\n          default:\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n        }\n      }\n\n      if (originalEvent.dataTransfer != null) {\n        let allowedEffects = allowedEffectsFrom(Options.Operations as string)\n        originalEvent.dataTransfer.effectAllowed = allowedEffects\n\n        if (ObjectIsNotEmpty(Options.DataToOffer)) {\n          for (let Type in Options.DataToOffer) {\n            if (Options.DataToOffer.hasOwnProperty(Type)) {\n              originalEvent.dataTransfer.setData(\n                Type, Options.DataToOffer[Type]\n              )\n            }\n          }\n        }\n      }\n\n      currentDroppableExtras  = Options.Extras\n      currentDropZoneExtras   = undefined\n      currentDropZonePosition = undefined\n\n      DroppableWasDropped     = false\n      currentDropOperation    = undefined\n      currentTypeTransferred  = undefined\n      currentDataTransferred  = undefined\n\n      isDragged = true\n      setTimeout(() => Element.classList.add('dragged'), 0)\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** continueDragging ****/\n\n    function continueDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (\n        (originalEvent.screenX === 0) && (originalEvent.screenY === 0) &&\n        ! PositioningWasDelayed\n      ) {\n        PositioningWasDelayed = true // last \"drag\" event contains wrong coord.s\n      } else {\n        PositioningWasDelayed = false\n\n        let relativePosition = Conversion.fromDocumentTo(\n          'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n        )                                       // relative to reference element\n\n        let x  = relativePosition.left + ReferenceDeltaX  // in user coordinates\n        let y  = relativePosition.top  + ReferenceDeltaY\n\n        x = constrained(x, Options.minX,Options.maxX)\n        y = constrained(y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x         // calculated AFTER constraining x,y\n        let dy = y - lastPosition.y                                      // dto.\n\n        lastPosition = { x,y }\n\n        invokeHandler('onDragMove', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      if (currentDropZoneElement === lastDropZoneElement) {\n        if (currentDropZoneElement != null) {\n          invokeHandler(\n            'onDropZoneHover', Options,\n            (currentDropZonePosition as Position).x,(currentDropZonePosition as Position).y,\n            currentDropZoneExtras, Options.Extras\n          )\n        }\n      } else {\n        if (currentDropZoneElement == null) {\n          Element.classList.remove('droppable')\n          invokeHandler('onDropZoneLeave', Options, lastDropZoneExtras, Options.Extras)\n        } else {\n          Element.classList.add('droppable')\n          invokeHandler(\n            'onDropZoneEnter', Options,\n            (currentDropZonePosition as Position).x,(currentDropZonePosition as Position).y,\n            lastDropZoneExtras, Options.Extras\n          )\n        }\n\n        lastDropZoneElement = currentDropZoneElement as HTMLElement\n        lastDropZoneExtras  = currentDropZoneExtras\n      }\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** finishDragging ****/\n\n    function finishDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n//    continueDragging(originalEvent)           // NO! positions might be wrong!\n\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (DroppableWasDropped) {\n        invokeHandler(\n          'onDropped', Options,\n          (currentDropZonePosition as Position).x,(currentDropZonePosition as Position).y,\n          currentDropOperation, currentTypeTransferred, currentDataTransferred,\n          currentDropZoneExtras, Options.Extras\n        )\n\n        currentDropZoneExtras   = undefined\n        currentDropZonePosition = undefined\n\n        DroppableWasDropped     = false\n        currentDropOperation    = undefined\n        currentTypeTransferred  = undefined\n        currentDataTransferred  = undefined\n      }\n\n      if (Options.onDragEnd != null) {\n        let x = constrained(lastPosition.x, Options.minX,Options.maxX)\n        let y = constrained(lastPosition.y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x\n        let dy = y - lastPosition.y\n\n        invokeHandler('onDragEnd', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      currentDroppableExtras = undefined\n\n      isDragged = false\n      Element.classList.remove('dragged','droppable')\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** updateDraggableOptions ****/\n\n    function updateDraggableOptions (Options:any):void {\n      Options = parsedDraggableOptions(Options)\n\n//    currentDraggableOptions.Extras = Options.Extras // Extras are kept constant\n\n      currentDraggableOptions.Dummy = (\n        Options.Dummy || currentDraggableOptions.Dummy\n      )\n\n      currentDraggableOptions.minX = Options.minX\n      currentDraggableOptions.minY = Options.minY\n      currentDraggableOptions.maxX = Options.maxX\n      currentDraggableOptions.maxY = Options.maxY\n\n      currentDraggableOptions.onDragStart = (\n        Options.onDragStart || currentDraggableOptions.onDragStart\n      )           // may be used to update initial position for subsequent drags\n    }\n\n  /**** updateDroppableOptions ****/\n\n    function updateDroppableOptions (Options:any):void {\n      Options = parsedDroppableOptions(Options)\n\n      currentDroppableOptions.Operations  = Options.Operations\n      currentDroppableOptions.DataToOffer = Options.DataToOffer\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragstart', startDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drag',      continueDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragend',   finishDragging)\n\n    return {\n      update:(Options:any) => {\n        updateDraggableOptions(Options)\n        updateDroppableOptions(Options)\n      }\n    }\n  }\n\n//-------------------------------------------------------------------------------\n//--                 use:asDropZone={options} - for drop zones                 --\n//-------------------------------------------------------------------------------\n\n  export type TypeAcceptanceSet = { [Type:string]:string }\n                   // values consist of 'copy', 'move', 'link' (blank-separated)\n  type DropZoneOptions = {\n    Extras?:any,\n    TypesToAccept?:TypeAcceptanceSet,\n    HoldDelay?:number,\n    onDroppableEnter?:(x:number,y:number, Operation:DropOperation, offeredTypeList:string[],\n                        DroppableExtras:any, DropZoneExtras:any) => boolean|undefined,\n    onDroppableMove?: (x:number,y:number, Operation:DropOperation, offeredTypeList:string[],\n                        DroppableExtras:any, DropZoneExtras:any) => boolean|undefined,\n    onDroppableHold?: (x:number,y:number, DroppableExtras:any, DropZoneExtras:any) => void,\n    onDroppableLeave?:(DroppableExtras:any, DropZoneExtras:any) => void,\n    onDrop?:          (x:number,y:number, Operation:DropOperation, DataOffered:any,\n                        DroppableExtras:any, DropZoneExtras:any) => string | undefined,\n  }\n\n/**** parsedDropZoneOptions ****/\n\n  function parsedDropZoneOptions (Options:any):DropZoneOptions {\n    Options = allowedPlainObject('drop zone options',Options) || {}\n\n    let Extras:any, TypesToAccept:TypeAcceptanceSet, HoldDelay:number\n    let onDroppableEnter:Function, onDroppableMove:Function, onDroppableLeave:Function\n    let onDroppableHold:Function, onDroppableRelease:Function, onDrop:Function\n\n    Extras = Options.Extras\n\n    allowPlainObject('data types to be accepted',Options.TypesToAccept)\n    TypesToAccept = Object.create(null)\n      for (let Type in Options.TypesToAccept) {\n        if (Options.TypesToAccept.hasOwnProperty(Type)) {\n          TypesToAccept[Type] = parsedOperations(\n            'list of accepted operations for type ' + quoted(Type),\n            Options.TypesToAccept[Type]\n          )\n        }\n      }\n    HoldDelay = allowedIntegerInRange('min. time to hold',Options.HoldDelay, 0) as number\n\n    onDroppableEnter   = allowedFunction('\"onDroppableEnter\" handler',  Options.onDroppableEnter)\n    onDroppableMove    = allowedFunction('\"onDroppableMove\" handler',   Options.onDroppableMove)\n    onDroppableLeave   = allowedFunction('\"onDroppableLeave\" handler',  Options.onDroppableLeave)\n    onDroppableHold    = allowedFunction('\"onDroppableHold\" handler',   Options.onDroppableHold)\n    onDroppableRelease = allowedFunction('\"onDroppableRelease\" handler',Options.onDroppableRelease)\n    onDrop             = allowedFunction('\"onDrop\" handler',            Options.onDrop)\n\n    return {\n      Extras, TypesToAccept, HoldDelay,\n// @ts-ignore we cannot validate given functions any further\n      onDroppableEnter, onDroppableMove, onDroppableLeave,\n// @ts-ignore we cannot validate given functions any further\n      onDroppableHold, onDroppableRelease, onDrop\n    }\n  }\n\n/**** use:asDropZone={options} ****/\n\n  export function asDropZone (\n    Element:HTMLElement|SVGElement, Options:DropZoneOptions\n  ) {\n    let currentDropZoneOptions:DropZoneOptions\n\n    currentDropZoneOptions = parsedDropZoneOptions(Options)\n\n  /**** enteredByDroppable ****/\n\n    function enteredByDroppable (originalEvent:DragEvent) {\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none')\n      ) { return }\n\n      let Options = currentDropZoneOptions\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) &&\n        (TypesToAccept[Type] !== '')          // \"getData\" is not available here\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) { return }\n\n      let DropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      let accepted:boolean|undefined = ResultOfHandler(\n        'onDroppableEnter', Options,\n        DropZonePosition.x, DropZonePosition.y,\n        wantedOperation, offeredTypeList, currentDroppableExtras, Options.Extras\n      )\n\n      if (accepted === false) {         // i.e. explicit \"false\" result required\n        return\n      } else {\n        currentDropZoneExtras   = Options.Extras\n        currentDropZoneElement  = Element\n        currentDropZonePosition = DropZonePosition\n\n        Element.classList.add('hovered')\n\n        originalEvent.preventDefault()\n        originalEvent.stopPropagation()\n      }\n    }\n\n  /**** hoveredByDroppable ****/\n\n    function hoveredByDroppable (originalEvent:DragEvent) {\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none') ||\n        (currentDropZoneElement != null) && (currentDropZoneElement !== Element)\n      ) {\n        Element.classList.remove('hovered')\n        return\n      }\n\n// in some browsers, it may be that (currentDropZone !== Element)!\n\n      let Options = currentDropZoneOptions\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) &&\n        (TypesToAccept[Type] !== '')          // \"getData\" is not available here\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) {\n        if (currentDropZoneElement === Element) {\n          currentDropZoneExtras   = undefined\n          currentDropZoneElement  = undefined\n          currentDropZonePosition = undefined\n        }\n\n        Element.classList.remove('hovered')\n        return\n      }\n\n      currentDropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      let accepted = ResultOfHandler(\n        'onDroppableMove', Options,\n        currentDropZonePosition.x, currentDropZonePosition.y,\n        wantedOperation, offeredTypeList, currentDroppableExtras, Options.Extras\n      )\n\n      if (accepted === false) {         // i.e. explicit \"false\" result required\n        currentDropZoneExtras   = undefined\n        currentDropZoneElement  = undefined\n        currentDropZonePosition = undefined\n\n        Element.classList.remove('hovered')\n      } else {              // warning: sometimes (currentDropZone !== Element)!\n        currentDropZoneExtras   = Options.Extras\n        currentDropZoneElement  = Element\n//      currentDropZonePosition has already been set before\n\n        Element.classList.add('hovered')\n\n        originalEvent.preventDefault()            // never allow default action!\n//      originalEvent.stopPropagation()\n\n        return false          // special return value when drop seems acceptable\n      }\n    }\n\n  /**** leftByDroppable ****/\n\n    function leftByDroppable (originalEvent:DragEvent) {\n      Element.classList.remove('hovered')\n\n      let Options = currentDropZoneOptions\n\n      if (currentDropZoneElement === Element) {\n        if (currentTypeTransferred == null) {           // see explanation below\n          currentDropZoneExtras   = undefined\n          currentDropZoneElement  = undefined\n\n          DroppableWasDropped     = false\n          currentDropZonePosition = undefined\n          currentTypeTransferred  = undefined\n          currentDataTransferred  = undefined\n\n          invokeHandler('onDroppableLeave', Options, currentDroppableExtras, Options.Extras)\n        }                   // swallow \"dragleave\" right after successful \"drop\"\n\n        originalEvent.preventDefault()\n        originalEvent.stopPropagation()\n      }\n    }\n\n  /**** droppedByDroppable ****/\n\n    function droppedByDroppable (originalEvent:DragEvent) {\n      Element.classList.remove('hovered')\n\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none') ||\n        (currentDropZoneElement !== Element)\n      ) { return }\n\n//    originalEvent.preventDefault()\n      originalEvent.stopPropagation()\n\n      let Options = currentDropZoneOptions\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) && (\n          (wantedOperation == null) ||\n          (TypesToAccept[Type].indexOf(wantedOperation) >= 0)\n        )\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) {\n        currentDropZoneExtras   = undefined\n        currentDropZonePosition = undefined\n\n        DroppableWasDropped     = false\n        currentDropOperation    = undefined\n        currentTypeTransferred  = undefined\n        currentDataTransferred  = undefined\n\n        invokeHandler('onDroppableLeave', Options, currentDroppableExtras, Options.Extras)\n\n        return\n      }\n\n      currentDropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      let offeredData:any = {}\n        offeredTypeList.forEach(\n// @ts-ignore originalEvent.dataTransfer definitely exists\n          (Type) => offeredData[Type] = originalEvent.dataTransfer.getData(Type)\n        )\n      let acceptedType = ResultOfHandler(\n        'onDrop', Options,\n        currentDropZonePosition.x, currentDropZonePosition.y,\n        wantedOperation, offeredData, currentDroppableExtras, Options.Extras\n      )\n\n      switch (true) {\n        case (acceptedType == null):\n          DroppableWasDropped    = true\n          currentDropOperation   = wantedOperation\n          currentTypeTransferred = undefined\n          currentDataTransferred = undefined\n          break\n        case ValueIsOneOf(acceptedType,offeredTypeList):\n          DroppableWasDropped    = true\n          currentDropOperation   = wantedOperation\n          currentTypeTransferred = acceptedType\n          currentDataTransferred = offeredData[acceptedType]\n          break\n        default:               // handler should return false in case of failure\n          DroppableWasDropped     = false\n          currentDropZoneExtras   = undefined\n          currentDropZonePosition = undefined\n          currentDropOperation    = undefined\n          currentTypeTransferred  = undefined\n          currentDataTransferred  = undefined\n\n//        invokeHandler('onDroppableLeave', Options, currentDroppableExtras, Options.Extras)\n      }\n\n      currentDropZoneElement = undefined\n    }\n\n  /**** updateDropZoneOptions ****/\n\n    function updateDropZoneOptions (Options:any):void {\n      Options = parsedDropZoneOptions(Options)\n\n      if (Options.Extras != null) {\n        currentDropZoneOptions.Extras = Options.Extras\n      }\n\n      if (ObjectIsNotEmpty(Options.TypesToAccept)) {\n        currentDropZoneOptions.TypesToAccept = Options.TypesToAccept\n      }\n\n      if (Options.HoldDelay != null) {\n        currentDropZoneOptions.HoldDelay = Options.HoldDelay\n      }\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragenter', enteredByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragover',  hoveredByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragleave', leftByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drop',      droppedByDroppable)\n\n    return { update:updateDropZoneOptions }\n  }\n\n/**** ValueIsPosition ****/\n\n  function ValueIsPosition (Candidate:any):boolean {\n    return (\n      ValueIsPlainObject(Candidate) &&\n      ValueIsFiniteNumber(Candidate.x) && ValueIsFiniteNumber(Candidate.y)\n    )\n  }\n\n/**** asPosition ****/\n\n  function asPosition (Value:any):Position {\n    return { x:Value.left, y:Value.top }\n  }\n\n/**** PositionReferenceFor ****/\n\n  function PositionReferenceFor (\n    Element:HTMLElement|SVGElement,\n    Options:DraggableOptions|DroppableOptions\n  ):Element {\n    let PositionReference:Element | undefined | null\n      switch (true) {\n        case (Options.relativeTo === 'parent'):\n          PositionReference = Element.parentElement\n          break\n        case (Options.relativeTo === 'body'):\n          PositionReference = document.body\n          break\n        case (Options.relativeTo instanceof HTMLElement):\n        case (Options.relativeTo instanceof SVGElement):\n  //    case (Options.relativeTo instanceof MathMLElement):\n          PositionReference = Options.relativeTo as Element\n          if (\n            (PositionReference != document.body) &&\n            ! document.body.contains(PositionReference)\n          ) throwError(\n            'InvalidArgument: the HTML element given as \"relativeTo\" option ' +\n            'is not part of this HTML document'\n          )\n          break\n        default:                                                 // CSS selector\n          PositionReference = Element.closest(Options.relativeTo as string)\n      }\n    return (PositionReference == null ? document.body : PositionReference)\n  }\n\n/**** DragImageFor ****/\n\n  function DragImageFor (\n    Element:HTMLElement|SVGElement,\n    Options:DraggableOptions|DroppableOptions\n  ):Element|undefined {\n    switch (true) {\n      case (Options.Dummy === 'standard'):\n        return undefined\n      case (Options.Dummy === 'none'):\n        let invisibleDragImage = document.createElement('div')\n          invisibleDragImage.setAttribute('style',\n            'display:block; position:absolute; width:1px; height:1px; ' +\n            'background:transparent; border:none; margin:0px; padding:0px; ' +\n            'cursor:auto'\n          )\n          document.body.appendChild(invisibleDragImage)\n        return invisibleDragImage\n      case ValueIsNonEmptyString(Options.Dummy):          // may flicker shortly\n        let auxiliaryElement = document.createElement('div')\n          auxiliaryElement.style.display  = 'block'\n          auxiliaryElement.style.position = 'absolute'\n          auxiliaryElement.style.left     = (document.body.scrollWidth + 100)+'px'\n\n          document.body.appendChild(auxiliaryElement)\n\n          auxiliaryElement.innerHTML = Options.Dummy as string\n        return auxiliaryElement.children[0]\n      case (Options.Dummy instanceof HTMLElement):\n      case (Options.Dummy instanceof SVGElement):\n//    case (Options.Dummy instanceof MathMLElement):\n        return Options.Dummy as Element\n      case ValueIsFunction(Options.Dummy):\n        let Candidate:HTMLElement | SVGElement | undefined = undefined\n        try {\n          Candidate = (Options.Dummy as Function)(Options.Extras, Element)\n        } catch (Signal) {\n          console.error('RuntimeError: creating draggable dummy failed',Signal)\n        }\n\n        if (Candidate != null) {\n          if ((Candidate instanceof HTMLElement) || (Candidate instanceof SVGElement)) {\n            return Candidate\n          } else {\n            console.error(\n              'InvalidArgument: the newly created draggable dummy is ' +\n              'neither an HTML nor an SVG element'\n            )\n          }\n        }\n    }\n  }\n\n/**** parsedOperations ****/\n\n  function parsedOperations (\n    Description:string, Argument:any, Default:string='copy move link'\n  ):string {\n    let Operations = allowedString(Description,Argument) || Default\n\n    switch (Operations.trim()) {\n      case 'all':  return 'copy move link'\n      case 'none': return ''\n    }\n\n    let OperationList = Operations.trim().replace(/\\s+/g,' ').split(' ')\n      allowListSatisfying(\n        Description,OperationList,\n        (Operation:string) => ValueIsOneOf(Operation,DropOperations)\n      )\n    return OperationList.reduce(\n      (Result:string, Operation:string) => (\n        Result.indexOf(Operation) < 0 ? Result + Operation + ' ': Result\n      ),' '\n    )\n  }\n\n/**** allowedEffectsFrom ****/\n\n  type allowedEffects = (\n    'none'|'copy'|'copyLink'|'copyMove'|'link'|'linkMove'|'move'|'all'\n  )\n\n  function allowedEffectsFrom (Operations:string):allowedEffects {\n    let EffectIndex = (                                       // Horner's method\n      (Operations.indexOf('move') < 0 ? 0 : 1) * 2 +\n      (Operations.indexOf('link') < 0 ? 0 : 1)\n    ) * 2 +\n    (Operations.indexOf('copy') < 0 ? 0 : 1)\n\n    return [\n      'none','copy','link','copyLink','move','copyMove','linkMove','all'\n    ][EffectIndex] as allowedEffects\n  }\n\n/**** invokeHandler ****/\n\n  function invokeHandler (Name:string, Options:any, ...Arguments:any):any {\n    if (Options[Name] != null) {\n      try {\n        return Options[Name].apply(null,Arguments)\n      } catch (Signal) {\n        console.error(quoted(Name) + ' handler failed',Signal)\n      }\n    }\n  }\n  const ResultOfHandler = invokeHandler\n\n\n"],"names":["currentDroppableExtras","currentDropZoneExtras","currentDropZoneElement","DroppableWasDropped","currentDropZonePosition","currentDropOperation","currentTypeTransferred","currentDataTransferred","parsedDraggableOptions","Options","Extras","relativeTo","onlyFrom","neverFrom","Dummy","DummyOffsetX","DummyOffsetY","minX","minY","maxX","maxY","onDragStart","Candidate","allowedPlainObject","ValueIsNonEmptyString","HTMLElement","SVGElement","throwError","allowedNonEmptyString","undefined","ValueIsFunction","allowedFiniteNumber","Infinity","ValueIsPlainObject","ValueIsFiniteNumber","x","y","_a","x_1","y_1","allowedFunction","onDragMove","onDragEnd","onDragCancel","fromForbiddenElement","Element","originalEvent","fromElement","clientX","clientY","touchedElement","document","elementFromPoint","innerElementOf","closest","contains","innerElements","children","i","l","length","innerElement","Position","Conversion","fromLocalTo","left","top","offsetWidth","offsetHeight","DropOperations","parsedDroppableOptions","Operations","parsedOperations","DataToOffer","Object","assign","onDropZoneEnter","onDropZoneHover","onDropZoneLeave","onDropped","parsedDropZoneOptions","TypesToAccept","Type","allowPlainObject","create","hasOwnProperty","quoted","HoldDelay","allowedIntegerInRange","onDroppableEnter","onDroppableMove","onDroppableLeave","onDroppableHold","onDroppableRelease","onDrop","asPosition","Value","PositionReferenceFor","PositionReference","parentElement","body","DragImageFor","invisibleDragImage","createElement","setAttribute","appendChild","auxiliaryElement","style","display","position","scrollWidth","innerHTML","Signal","console","error","Description","Argument","Default","allowedString","trim","OperationList","replace","split","allowListSatisfying","Operation","ValueIsOneOf","reduce","Result","indexOf","invokeHandler","Name","_i","Arguments","apply","ResultOfHandler","isDragged","currentDraggableOptions","ReferenceDeltaX","ReferenceDeltaY","PositioningWasDelayed","DragImage","initialPosition","lastPosition","addEventListener","stopPropagation","preventDefault","relativePosition","fromDocumentTo","pageX","pageY","StartPosition","constrained","dataTransfer","OffsetX","OffsetY","PositionInDraggable","setDragImage","setTimeout","removeChild","ValueIsString","effectAllowed","classList","add","screenX","screenY","dx","dy","remove","update","currentDropZoneOptions","wantedOperation","dropEffect","offeredTypeList","types","filter","DropZonePosition","offeredData","forEach","getData","acceptedType","ObjectIsNotEmpty","currentDroppableOptions","lastDropZoneElement","lastDropZoneExtras","allowedEffects","setData","updateDraggableOptions","updateDroppableOptions"],"mappings":"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"}