{"version":3,"file":"svelte-drag-and-drop-actions.js","sources":["../src/svelte-drag-and-drop-actions.ts"],"sourcesContent":["//----------------------------------------------------------------------------//\n//                        Svelte Drag-and-Drop Actions                        //\n//----------------------------------------------------------------------------//\n\n  import {\n    global, throwError,\n    ValueIsNumber, ValueIsFiniteNumber, ValueIsString, ValueIsNonEmptyString,\n    ValueIsFunction, ValueIsPlainObject, ValueIsOneOf,\n    allowedFiniteNumber, allowedIntegerInRange, allowedOrdinal,\n    allowedString, allowedNonEmptyString,\n    allowPlainObject, allowedPlainObject,\n    allowListSatisfying, allowedFunction,\n    ObjectIsNotEmpty, quoted, constrained\n  } from 'javascript-interface-library'\n\n  import Conversion from 'svelte-coordinate-conversion'\n\n/**** never ever trust module loading if you REALLY need a singleton! ****/\n// finding multiple existing singletons if you actually trust them is so hard!\n\n  type ContextType = extendedDragAndDropSupport & SupportForHoldingAndPanning\n  const Context:ContextType = (            // make this package a REAL singleton\n    '__DragAndDropActions' in global\n    ? global.__DragAndDropActions\n    : global.__DragAndDropActions = {}\n  )\n\n//-------------------------------------------------------------------------------\n//--             use:asDraggable={options} - \"drag\" without \"drop\"             --\n//-------------------------------------------------------------------------------\n\n  export type PositionReference = (\n    'parent' | 'body' | string | HTMLElement | SVGElement // | MathMLElement\n  )\n\n  export type Position = { x:number, y:number }\n\n  export type DragDummy = (\n    string | HTMLElement | SVGElement | // MathMLElement |\n    ((DraggableExtras:any, Element:HTMLElement|SVGElement) => HTMLElement|SVGElement) |\n    'standard' | 'none'\n  ) | null | undefined\n\n  type DraggableOptions = {\n    Extras?:any,\n    relativeTo?:PositionReference, onlyFrom?:string, neverFrom?:string,\n    Dummy?:DragDummy, DummyOffsetX?:number, DummyOffsetY?:number,\n    minX?:number, minY?:number, maxX?:number, maxY?:number,\n    Pannable?:string|HTMLElement|SVGElement,\n    PanSensorWidth?:number, PanSensorHeight?:number, PanSpeed?:number,\n    onDragStart?:Position | ((DraggableExtras:any) => Position),\n    onDragMove?: (x:number,y:number, dx:number,dy:number, DraggableExtras:any) => void,\n    onDragEnd?:  (x:number,y:number, dx:number,dy:number, DraggableExtras:any) => void,\n  }\n\n/**** parsedDraggableOptions ****/\n\n  function parsedDraggableOptions (Options:any):DraggableOptions {\n    Options = allowedPlainObject('drag options',Options) || {}\n\n    let Extras:any, relativeTo:PositionReference\n    let onlyFrom:string|undefined, neverFrom:string|undefined\n    let Dummy:DragDummy, DummyOffsetX:number, DummyOffsetY:number\n    let minX:number, minY:number, maxX:number, maxY:number\n    let Pannable:string|HTMLElement|SVGElement|undefined\n    let PanSensorWidth:number, PanSensorHeight:number, PanSpeed:number\n    let onDragStart:Function, onDragMove:Function, onDragEnd:Function, onDragCancel:Function\n\n    Extras = Options.Extras\n\n    switch (true) {\n      case (Options.relativeTo == null):\n        relativeTo = 'parent'; break\n      case (Options.relativeTo === 'parent'):\n      case (Options.relativeTo === 'body'):\n      case ValueIsNonEmptyString(Options.relativeTo):\n      case (Options.relativeTo instanceof HTMLElement):\n      case (Options.relativeTo instanceof SVGElement):\n//    case (Options.relativeTo instanceof MathMLElement):\n        relativeTo = Options.relativeTo as PositionReference; break\n      default: throwError(\n        'InvalidArgument: invalid position reference given'\n      )\n    }\n\n    onlyFrom  = allowedNonEmptyString ('\"onlyFrom\" CSS selector',Options.onlyFrom)\n    neverFrom = allowedNonEmptyString('\"neverFrom\" CSS selector',Options.neverFrom)\n\n    switch (true) {\n      case (Options.Dummy == null):\n        Dummy = undefined; break\n      case (Options.Dummy === 'standard'):\n      case (Options.Dummy === 'none'):\n      case ValueIsNonEmptyString(Options.Dummy):\n      case (Options.Dummy instanceof HTMLElement):\n      case (Options.Dummy instanceof SVGElement):\n//    case (Options.Dummy instanceof MathMLElement):\n      case ValueIsFunction(Options.Dummy):\n        Dummy = Options.Dummy as DragDummy; break\n      default: throwError(\n        'InvalidArgument: invalid drag dummy specification given'\n      )\n    }\n\n    DummyOffsetX = allowedFiniteNumber('dummy x offset',Options.DummyOffsetX)\n    DummyOffsetY = allowedFiniteNumber('dummy y offset',Options.DummyOffsetY)\n\n    minX = allowedFiniteNumber('min. x position',Options.minX)\n      if (minX == null) { minX = -Infinity }\n    minY = allowedFiniteNumber('min. y position',Options.minY)\n      if (minY == null) { minY = -Infinity }\n    maxX = allowedFiniteNumber('max. x position',Options.maxX)\n      if (maxX == null) { maxX = Infinity }\n    maxY = allowedFiniteNumber('max. y position',Options.maxY)\n      if (maxY == null) { maxY = Infinity }\n\n    switch (true) {\n      case (Options.Pannable == null):\n        Pannable = undefined; break\n      case ValueIsNonEmptyString(Options.Pannable):\n      case (Options.Pannable instanceof HTMLElement):\n      case (Options.Pannable instanceof SVGElement):\n//    case (Options.Pannable instanceof MathMLElement):\n        Pannable = Options.Pannable; break\n      default: throwError(\n        'InvalidArgument: invalid \"Pannable\" specification given'\n      )\n    }\n\n    PanSensorWidth  = allowedOrdinal ('panning sensor width',Options.PanSensorWidth)\n      if (PanSensorWidth  == null) { PanSensorWidth = 20 }\n    PanSensorHeight = allowedOrdinal('panning sensor height',Options.PanSensorHeight)\n      if (PanSensorHeight == null) { PanSensorHeight = 20 }\n    PanSpeed        = allowedOrdinal        ('panning speed',Options.PanSpeed)\n      if (PanSpeed == null) { PanSpeed = 10 }\n\n    if (ValueIsPosition(Options.onDragStart)) {\n      let { x,y } = Options.onDragStart as Position\n      onDragStart = () => ({x,y})\n    } else {\n      onDragStart = allowedFunction('\"onDragStart\" handler', Options.onDragStart)\n    }\n\n    onDragMove = allowedFunction('\"onDragMove\" handler', Options.onDragMove)\n    onDragEnd  = allowedFunction('\"onDragEnd\" handler',  Options.onDragEnd)\n\n    return {\n      Extras, relativeTo, onlyFrom,neverFrom, Dummy, DummyOffsetX,DummyOffsetY,\n      minX,minY, maxX,maxY,\n      Pannable, PanSensorWidth,PanSensorHeight, PanSpeed,\n// @ts-ignore we cannot validate given functions any further\n      onDragStart, onDragMove, onDragEnd, onDragCancel\n    }\n  }\n\n/**** use:asDraggable={options} ****/\n\n  export function asDraggable (\n    Element:HTMLElement|SVGElement, Options:DraggableOptions\n  ) {\n    let isDragged:boolean\n    let currentDraggableOptions:DraggableOptions\n\n    let PositionReference:Element         // element with user coordinate system\n    let ReferenceDeltaX:number, ReferenceDeltaY:number  // mouse -> user coord.s\n    let PositioningWasDelayed:boolean // workaround for prob. with \"drag\" events\n    let DragImage:Element | undefined\n    let initialPosition:Position                    // given in user coordinates\n    let lastPosition:   Position                                         // dto.\n\n    isDragged = false\n\n    currentDraggableOptions = parsedDraggableOptions(Options)\n\n  /**** startDragging ****/\n\n    function startDragging (originalEvent:DragEvent) {\n      let Options = currentDraggableOptions\n\n      if (fromForbiddenElement(Element,Options,originalEvent)) {\n        originalEvent.stopPropagation()\n        originalEvent.preventDefault()\n        return false\n      }\n\n      PositionReference = PositionReferenceFor(Element,Options)\n\n      let relativePosition = Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n      )                                         // relative to reference element\n\n      ReferenceDeltaX = ReferenceDeltaY = 0; initialPosition = { x:0,y:0 }\n      if (Options.onDragStart == null) {\n        initialPosition = { x:0,y:0 }               // given in user coordinates\n      } else {\n        try {\n          let StartPosition = (Options.onDragStart as Function)(Options.Extras)\n          if (ValueIsPlainObject(StartPosition)) {\n            let x = allowedFiniteNumber('x start position',StartPosition.x)\n            let y = allowedFiniteNumber('y start position',StartPosition.y)\n\n            ReferenceDeltaX = x - relativePosition.left\n            ReferenceDeltaY = y - relativePosition.top\n\n            x = constrained(x, Options.minX,Options.maxX)\n            y = constrained(y, Options.minY,Options.maxY)\n\n            initialPosition = { x,y }               // given in user coordinates\n          }\n        } catch (Signal) {\n          console.error('\"onDragStart\" handler failed',Signal)\n        }\n      }\n\n      lastPosition = initialPosition\n\n      PositioningWasDelayed = false                    // initializes workaround\n\n      if (Options.Dummy == null) {\n        Options.Dummy = 'none'      // this is the default for \"use.asDraggable\"\n      }\n\n      DragImage = DragImageFor(Element,Options)\n      if ((DragImage != null) && (originalEvent.dataTransfer != null)) {\n        let OffsetX = Options.DummyOffsetX as number\n        let OffsetY = Options.DummyOffsetY as number\n\n        if ((OffsetX == null) || (OffsetY == null)) {\n          let PositionInDraggable = Conversion.fromDocumentTo(\n            'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n          )\n\n          if (OffsetX == null) { OffsetX = PositionInDraggable.left }\n          if (OffsetY == null) { OffsetY = PositionInDraggable.top }\n        }\n\n        switch (true) {\n          case (Options.Dummy === 'none'):\n            originalEvent.dataTransfer.setDragImage(DragImage,0,0)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(DragImage as HTMLElement)\n            },0)\n            break\n          case ValueIsString(Options.Dummy):\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(\n                (DragImage as HTMLElement).parentElement as HTMLElement\n              )\n            },0)\n            break\n          default:\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n        }\n      }\n\n      if (originalEvent.dataTransfer != null) {\n        originalEvent.dataTransfer.effectAllowed = 'none'\n      }\n\n      isDragged = true\n      setTimeout(() => Element.classList.add('dragged'), 0)\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** continueDragging ****/\n\n    function continueDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n      let Options = currentDraggableOptions\n\n      if (\n        (originalEvent.screenX === 0) && (originalEvent.screenY === 0) &&\n        ! PositioningWasDelayed\n      ) {\n        PositioningWasDelayed = true // last \"drag\" event contains wrong coord.s\n      } else {\n        PositioningWasDelayed = false\n\n        performPanningFor(\n          'draggable',\n          Element, Options, originalEvent.pageX,originalEvent.pageY\n        )\n\n        let relativePosition = Conversion.fromDocumentTo(\n          'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n        )                                       // relative to reference element\n\n        let x  = relativePosition.left + ReferenceDeltaX  // in user coordinates\n        let y  = relativePosition.top  + ReferenceDeltaY\n\n        x = constrained(x, Options.minX,Options.maxX)\n        y = constrained(y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x         // calculated AFTER constraining x,y\n        let dy = y - lastPosition.y                                      // dto.\n\n        lastPosition = { x,y }\n\n        invokeHandler('onDragMove', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** finishDragging ****/\n\n    function finishDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n//    continueDragging(originalEvent)           // NO! positions might be wrong!\n\n      let Options = currentDraggableOptions\n\n      if (Options.onDragEnd != null) {\n        let x = constrained(lastPosition.x, Options.minX,Options.maxX)\n        let y = constrained(lastPosition.y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x\n        let dy = y - lastPosition.y\n\n        invokeHandler('onDragEnd', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      isDragged = false\n      Element.classList.remove('dragged')\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** updateDraggableOptions ****/\n\n    function updateDraggableOptions (Options:any):void {\n      Options = parsedDraggableOptions(Options)\n\n      if (\n        (currentDraggableOptions.Extras == null) && (Options.Extras != null)\n      ) {\n        currentDraggableOptions.Extras = Options.Extras\n      }           // Extras may be set with delay, but remain constant afterwards\n\n      currentDraggableOptions.Dummy = (\n        Options.Dummy || currentDraggableOptions.Dummy\n      )\n\n      currentDraggableOptions.minX = Options.minX\n      currentDraggableOptions.minY = Options.minY\n      currentDraggableOptions.maxX = Options.maxX\n      currentDraggableOptions.maxY = Options.maxY\n\n      currentDraggableOptions.Pannable        = Options.Pannable\n      currentDraggableOptions.PanSensorWidth  = Options.PanSensorWidth\n      currentDraggableOptions.PanSensorHeight = Options.PanSensorHeight\n      currentDraggableOptions.PanSpeed        = Options.PanSpeed\n\n      currentDraggableOptions.onDragStart = (\n        Options.onDragStart || currentDraggableOptions.onDragStart\n      )           // may be used to update initial position for subsequent drags\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragstart', startDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drag',      continueDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragend',   finishDragging)\n\n    return { update:updateDraggableOptions }\n  }\n\n/**** fromForbiddenElement ****/\n\n  function fromForbiddenElement (\n    Element:HTMLElement|SVGElement, Options:DraggableOptions,\n    originalEvent:DragEvent\n  ):boolean {\n    if ((Options.onlyFrom != null) || (Options.neverFrom != null)) {\n      let x = originalEvent.clientX\n      let y = originalEvent.clientY\n\n      let touchedElement = document.elementFromPoint(x,y) as HTMLElement\n\n//    elementFromPoint considers elements with \"pointer-events\" <> \"none\" only\n//    but sometimes, \"pointer-events:none\" is needed for proper operation\n\n      touchedElement = innerElementOf(touchedElement, x,y)\n\n      if (Options.onlyFrom != null) {\n        let fromElement = touchedElement.closest(Options.onlyFrom as string)\n        if ((Element !== fromElement) && ! Element.contains(fromElement)) {\n          return true\n        }\n      }\n\n      if (Options.neverFrom != null) {\n        let fromElement = touchedElement.closest(Options.neverFrom as string)\n        if ((Element === fromElement) || Element.contains(fromElement)) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n/**** innerElementOf ****/\n\n  function innerElementOf (Candidate:HTMLElement, x:number,y:number):HTMLElement {\n    let innerElements = Candidate.children\n    for (let i = 0, l = innerElements.length; i < l; i++) {\n      let innerElement = innerElements[i] as HTMLElement\n\n      let Position = Conversion.fromLocalTo(\n        'viewport', { left:0, top:0 }, innerElement\n      )\n      if ((x < Position.left) || (y < Position.top)) { continue }\n\n      if (x > Position.left+innerElement.offsetWidth-1) { continue }\n      if (y > Position.top+innerElement.offsetHeight-1) { continue }\n\n      return innerElementOf(innerElement, x,y)\n    }\n\n    return Candidate               // this is the innermost element at (x,y)\n  }\n\n/**** extended Drag-and-Drop Support ****/\n\n  type extendedDragAndDropSupport = {\n    currentDroppableExtras:any,        // extras for currently dragged droppable\n    currentDropZoneExtras:any,         // extras for currently hovered drop zone\n    currentDropZoneElement:Element|undefined,                 // dto. as Element\n\n    DroppableWasDropped:boolean,        // indicates a successful drop operation\n    currentDropZonePosition:Position|undefined, // position relative to DropZone\n    currentDropOperation:DropOperation|undefined,       // actual drop operation\n    currentTypeTransferred:string|undefined,  // actual type of transferred data\n    currentDataTransferred:any,                       // actual data transferred\n  }\n\n/**** Support for Holding and Panning ****/\n\n  type SupportForHoldingAndPanning = {\n    HoldPosition?:Position,               // current position to compare against\n    HoldTimer?:any,\n    HoldWasTriggeredForElement?:HTMLElement | SVGElement,\n\n    DropZonePanning?:boolean\n  }                                           // because we trigger it once only\n\n//-------------------------------------------------------------------------------\n//--               use:asDroppable={options} - \"drag\" and \"drop\"               --\n//-------------------------------------------------------------------------------\n\n  export const DropOperations = [ 'copy', 'move', 'link' ]\n  export type  DropOperation  = typeof DropOperations[number]\n\n  export type DataOfferSet = { [Type:string]:string }\n\n  type DroppableOptions = DraggableOptions & {\n    Operations?:string,// consisting of 'copy', 'move', 'link' (blank-separated)\n    DataToOffer?:DataOfferSet,\n    onDropZoneEnter?: (x:number,y:number, DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropZoneHover?: (x:number,y:number, DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropZoneLeave?: (DropZoneExtras:any, DroppableExtras:any) => void,\n    onDropped?:       (x:number,y:number, Operation:DropOperation,\n                        TypeTransferred:string, DataTransferred:any,\n                        DropZoneExtras:any, DroppableExtras:any) => void,\n  }\n\n/**** parsedDroppableOptions ****/\n\n  function parsedDroppableOptions (Options:any):DroppableOptions {\n    Options = allowedPlainObject('drop options',Options) || {}\n\n    let Operations:string, DataToOffer:DataOfferSet\n    let onDropZoneEnter:Function, onDropZoneHover:Function, onDropZoneLeave:Function\n    let onDropped:Function\n\n    Operations  = parsedOperations('list of allowed operations',Options.Operations,'copy')\n    DataToOffer = Object.assign(\n      {}, allowedPlainObject('data to be offered',Options.DataToOffer)\n    )\n    if ('none' in DataToOffer) throwError(\n      'InvalidArgument: \"none\" is not a valid data type'\n    )\n\n    onDropZoneEnter = allowedFunction('\"onDropZoneEnter\" handler',Options.onDropZoneEnter)\n    onDropZoneHover = allowedFunction('\"onDropZoneHover\" handler',Options.onDropZoneHover)\n    onDropZoneLeave = allowedFunction('\"onDropZoneLeave\" handler',Options.onDropZoneLeave)\n    onDropped       = allowedFunction('\"onDropped\" handler',      Options.onDropped)\n\n    return {\n      Operations, DataToOffer,\n// @ts-ignore we cannot validate given functions any further\n      onDropZoneEnter, onDropZoneHover, onDropZoneLeave, onDropped\n    }\n  }\n\n/**** use:asDroppable={options} ****/\n\n  export function asDroppable (\n    Element:HTMLElement|SVGElement, Options:DroppableOptions\n  ) {\n    let isDragged:boolean\n    let currentDraggableOptions:DraggableOptions\n    let currentDroppableOptions:DroppableOptions\n\n    let PositionReference:Element         // element with user coordinate system\n    let ReferenceDeltaX:number, ReferenceDeltaY:number  // mouse -> user coord.s\n    let PositioningWasDelayed:boolean // workaround for prob. with \"drag\" events\n    let DragImage:Element | undefined\n    let initialPosition:Position                    // given in user coordinates\n    let lastPosition:   Position                                         // dto.\n\n    let lastDropZoneElement:HTMLElement|SVGElement|undefined\n    let lastDropZoneExtras:any\n\n    isDragged = false\n\n    currentDraggableOptions = parsedDraggableOptions(Options)\n    currentDroppableOptions = parsedDroppableOptions(Options)\n\n  /**** startDragging ****/\n\n    function startDragging (originalEvent:DragEvent) {\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (fromForbiddenElement(Element,Options,originalEvent)) {\n        originalEvent.stopPropagation()\n        originalEvent.preventDefault()\n        return false\n      }\n\n      PositionReference = PositionReferenceFor(Element,Options)\n\n      let relativePosition = Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n      )                                         // relative to reference element\n\n      ReferenceDeltaX = ReferenceDeltaY = 0; initialPosition = { x:0,y:0 }\n      if (Options.onDragStart == null) {\n        initialPosition = { x:0,y:0 }               // given in user coordinates\n      } else {\n        try {\n          let StartPosition = (Options.onDragStart as Function)(Options.Extras)\n          if (ValueIsPlainObject(StartPosition)) {\n            let x = allowedFiniteNumber('x start position',StartPosition.x)\n            let y = allowedFiniteNumber('y start position',StartPosition.y)\n\n            ReferenceDeltaX = x - relativePosition.left\n            ReferenceDeltaY = y - relativePosition.top\n\n            x = constrained(x, Options.minX,Options.maxX)\n            y = constrained(y, Options.minY,Options.maxY)\n\n            initialPosition = { x,y }               // given in user coordinates\n          }\n        } catch (Signal) {\n          console.error('\"onDragStart\" handler failed',Signal)\n        }\n      }\n\n      lastPosition        = initialPosition\n      lastDropZoneElement = undefined\n      lastDropZoneExtras  = undefined\n\n      PositioningWasDelayed = false                    // initializes workaround\n\n      if (Options.Dummy == null) {\n        Options.Dummy = 'standard'  // this is the default for \"use.asDroppable\"\n      }\n\n      DragImage = DragImageFor(Element,Options)\n      if ((DragImage != null) && (originalEvent.dataTransfer != null)) {\n        let OffsetX = Options.DummyOffsetX as number\n        let OffsetY = Options.DummyOffsetY as number\n\n        if ((OffsetX == null) || (OffsetY == null)) {\n          let PositionInDraggable = Conversion.fromDocumentTo(\n            'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n          )\n\n          if (OffsetX == null) { OffsetX = PositionInDraggable.left }\n          if (OffsetY == null) { OffsetY = PositionInDraggable.top }\n        }\n\n        switch (true) {\n          case (Options.Dummy === 'none'):\n            originalEvent.dataTransfer.setDragImage(DragImage,0,0)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(DragImage as HTMLElement)\n            },0)\n            break\n          case ValueIsString(Options.Dummy):\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n            setTimeout(() => { // remove element after browser took its snapshot\n              document.body.removeChild(\n                (DragImage as HTMLElement).parentElement as HTMLElement\n              )\n            },0)\n            break\n          default:\n            originalEvent.dataTransfer.setDragImage(DragImage, OffsetX,OffsetY)\n        }\n      }\n\n      if (originalEvent.dataTransfer != null) {\n        let allowedEffects = allowedEffectsFrom(Options.Operations as string)\n        originalEvent.dataTransfer.effectAllowed = allowedEffects\n\n        if (ObjectIsNotEmpty(Options.DataToOffer)) {\n          for (let Type in Options.DataToOffer) {\n            if (Options.DataToOffer.hasOwnProperty(Type)) {\n              originalEvent.dataTransfer.setData(\n                Type, Options.DataToOffer[Type]\n              )\n            }\n          }\n        }\n      }\n\n      Context.currentDroppableExtras  = Options.Extras\n      Context.currentDropZoneExtras   = undefined\n      Context.currentDropZonePosition = undefined\n      Context.currentDropZoneElement  = undefined\n\n      Context.DroppableWasDropped     = false\n      Context.currentDropOperation    = undefined\n      Context.currentTypeTransferred  = undefined\n      Context.currentDataTransferred  = undefined\n\n      isDragged = true\n      setTimeout(() => Element.classList.add('dragged'), 0)\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** continueDragging ****/\n\n    function continueDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (\n        (originalEvent.screenX === 0) && (originalEvent.screenY === 0) &&\n        ! PositioningWasDelayed\n      ) {\n        PositioningWasDelayed = true // last \"drag\" event contains wrong coord.s\n      } else {\n        PositioningWasDelayed = false\n\n        performPanningFor(\n          'draggable',\n          Element, Options, originalEvent.pageX,originalEvent.pageY\n        )\n\n        let relativePosition = Conversion.fromDocumentTo(\n          'local', { left:originalEvent.pageX, top:originalEvent.pageY }, PositionReference\n        )                                       // relative to reference element\n\n        let x  = relativePosition.left + ReferenceDeltaX  // in user coordinates\n        let y  = relativePosition.top  + ReferenceDeltaY\n\n        x = constrained(x, Options.minX,Options.maxX)\n        y = constrained(y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x         // calculated AFTER constraining x,y\n        let dy = y - lastPosition.y                                      // dto.\n\n        lastPosition = { x,y }\n\n        invokeHandler('onDragMove', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      if (Context.currentDropZoneElement === lastDropZoneElement) {\n        if (Context.currentDropZoneElement != null) {\n          invokeHandler(\n            'onDropZoneHover', Options,\n            (Context.currentDropZonePosition as Position).x,(Context.currentDropZonePosition as Position).y,\n            Context.currentDropZoneExtras, Options.Extras\n          )\n        }\n      } else {\n        if (Context.currentDropZoneElement == null) {\n          Element.classList.remove('droppable')\n          invokeHandler('onDropZoneLeave', Options, lastDropZoneExtras, Options.Extras)\n        } else {\n          Element.classList.add('droppable')\n          invokeHandler(\n            'onDropZoneEnter', Options,\n            (Context.currentDropZonePosition as Position).x,(Context.currentDropZonePosition as Position).y,\n            lastDropZoneExtras, Options.Extras\n          )\n        }\n\n        lastDropZoneElement = Context.currentDropZoneElement as HTMLElement\n        lastDropZoneExtras  = Context.currentDropZoneExtras\n      }\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** finishDragging ****/\n\n    function finishDragging (originalEvent:DragEvent) {\n      if (! isDragged) { return false }\n\n//    continueDragging(originalEvent)           // NO! positions might be wrong!\n\n      let Options = Object.assign(\n        {}, currentDraggableOptions, currentDroppableOptions\n      )\n\n      if (Context.DroppableWasDropped) {\n        invokeHandler(\n          'onDropped', Options,\n          (Context.currentDropZonePosition as Position).x,(Context.currentDropZonePosition as Position).y,\n          Context.currentDropOperation, Context.currentTypeTransferred, Context.currentDataTransferred,\n          Context.currentDropZoneExtras, Options.Extras\n        )\n\n        Context.currentDropZoneExtras   = undefined\n        Context.currentDropZonePosition = undefined\n        Context.currentDropZoneElement  = undefined\n\n        Context.DroppableWasDropped     = false\n        Context.currentDropOperation    = undefined\n        Context.currentTypeTransferred  = undefined\n        Context.currentDataTransferred  = undefined\n      }\n\n      if (Options.onDragEnd != null) {\n        let x = constrained(lastPosition.x, Options.minX,Options.maxX)\n        let y = constrained(lastPosition.y, Options.minY,Options.maxY)\n\n        let dx = x - lastPosition.x\n        let dy = y - lastPosition.y\n\n        invokeHandler('onDragEnd', Options, x,y, dx,dy, Options.Extras)\n      }\n\n      Context.currentDroppableExtras = undefined\n\n      isDragged = false\n      Element.classList.remove('dragged','droppable')\n\n      originalEvent.stopPropagation()\n    }\n\n  /**** updateDraggableOptions ****/\n\n    function updateDraggableOptions (Options:any):void {\n      Options = parsedDraggableOptions(Options)\n\n      if (\n        (currentDraggableOptions.Extras == null) && (Options.Extras != null)\n      ) {\n        currentDraggableOptions.Extras = Options.Extras\n      }           // Extras may be set with delay, but remain constant afterwards\n\n      currentDraggableOptions.Dummy = (\n        Options.Dummy || currentDraggableOptions.Dummy\n      )\n\n      currentDraggableOptions.minX = Options.minX\n      currentDraggableOptions.minY = Options.minY\n      currentDraggableOptions.maxX = Options.maxX\n      currentDraggableOptions.maxY = Options.maxY\n\n      currentDraggableOptions.Pannable        = Options.Pannable\n      currentDraggableOptions.PanSensorWidth  = Options.PanSensorWidth\n      currentDraggableOptions.PanSensorHeight = Options.PanSensorHeight\n      currentDraggableOptions.PanSpeed        = Options.PanSpeed\n\n      currentDraggableOptions.onDragStart = (\n        Options.onDragStart || currentDraggableOptions.onDragStart\n      )           // may be used to update initial position for subsequent drags\n    }\n\n  /**** updateDroppableOptions ****/\n\n    function updateDroppableOptions (Options:any):void {\n      Options = parsedDroppableOptions(Options)\n\n      currentDroppableOptions.Operations  = Options.Operations\n      currentDroppableOptions.DataToOffer = Options.DataToOffer\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragstart', startDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drag',      continueDragging)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragend',   finishDragging)\n\n    return {\n      update:(Options:any) => {\n        updateDraggableOptions(Options)\n        updateDroppableOptions(Options)\n      }\n    }\n  }\n\n//-------------------------------------------------------------------------------\n//--                 use:asDropZone={options} - for drop zones                 --\n//-------------------------------------------------------------------------------\n\n  export type TypeAcceptanceSet = { [Type:string]:string }\n                   // values consist of 'copy', 'move', 'link' (blank-separated)\n  type DropZoneOptions = {\n    Extras?:any,\n    TypesToAccept?:TypeAcceptanceSet,\n    HoldDelay?:number,\n    Pannable?:string|'this'|HTMLElement|SVGElement,\n    PanSensorWidth?:number, PanSensorHeight?:number, PanSpeed?:number,\n    onDroppableEnter?:(x:number,y:number, Operation:DropOperation, offeredTypeList:string[],\n                        DroppableExtras:any, DropZoneExtras:any) => boolean|undefined,\n    onDroppableMove?: (x:number,y:number, Operation:DropOperation, offeredTypeList:string[],\n                        DroppableExtras:any, DropZoneExtras:any) => boolean|undefined,\n    onDroppableHold?: (x:number,y:number, DroppableExtras:any, DropZoneExtras:any) => void,\n    onDroppableLeave?:(DroppableExtras:any, DropZoneExtras:any) => void,\n    onDrop?:          (x:number,y:number, Operation:DropOperation, DataOffered:any,\n                        DroppableExtras:any, DropZoneExtras:any) => string | undefined,\n  }\n\n/**** parsedDropZoneOptions ****/\n\n  function parsedDropZoneOptions (Options:any):DropZoneOptions {\n    Options = allowedPlainObject('drop zone options',Options) || {}\n\n    let Extras:any, TypesToAccept:TypeAcceptanceSet, HoldDelay:number\n    let Pannable:string|'this'|HTMLElement|SVGElement|undefined\n    let PanSensorWidth:number, PanSensorHeight:number, PanSpeed:number\n    let onDroppableEnter:Function, onDroppableMove:Function, onDroppableLeave:Function\n    let onDroppableHold:Function, onDroppableRelease:Function, onDrop:Function\n\n    Extras = Options.Extras\n\n    allowPlainObject('data types to be accepted',Options.TypesToAccept)\n    TypesToAccept = Object.create(null)\n      if ((Options.TypesToAccept != null) && ('none' in Options.TypesToAccept)) throwError(\n        'InvalidArgument: \"none\" is not a valid data type'\n      )\n\n      for (let Type in Options.TypesToAccept) {\n        if (Options.TypesToAccept.hasOwnProperty(Type)) {\n          TypesToAccept[Type] = parsedOperations(\n            'list of accepted operations for type ' + quoted(Type),\n            Options.TypesToAccept[Type]\n          )\n        }\n      }\n    HoldDelay = allowedIntegerInRange('min. time to hold',Options.HoldDelay, 0) as number\n\n    switch (true) {\n      case (Options.Pannable == null):\n        Pannable = undefined; break\n      case (Options.Pannable === 'this'):\n      case ValueIsNonEmptyString(Options.Pannable):\n      case (Options.Pannable instanceof HTMLElement):\n      case (Options.Pannable instanceof SVGElement):\n//    case (Options.Pannable instanceof MathMLElement):\n        Pannable = Options.Pannable; break\n      default: throwError(\n        'InvalidArgument: invalid \"Pannable\" specification given'\n      )\n    }\n\n    PanSensorWidth  = allowedOrdinal ('panning sensor width',Options.PanSensorWidth)\n      if (PanSensorWidth  == null) { PanSensorWidth = 20 }\n    PanSensorHeight = allowedOrdinal('panning sensor height',Options.PanSensorHeight)\n      if (PanSensorHeight == null) { PanSensorHeight = 20 }\n    PanSpeed        = allowedOrdinal        ('panning speed',Options.PanSpeed)\n      if (PanSpeed == null) { PanSpeed = 10 }\n\n    onDroppableEnter   = allowedFunction('\"onDroppableEnter\" handler',  Options.onDroppableEnter)\n    onDroppableMove    = allowedFunction('\"onDroppableMove\" handler',   Options.onDroppableMove)\n    onDroppableLeave   = allowedFunction('\"onDroppableLeave\" handler',  Options.onDroppableLeave)\n    onDroppableHold    = allowedFunction('\"onDroppableHold\" handler',   Options.onDroppableHold)\n    onDroppableRelease = allowedFunction('\"onDroppableRelease\" handler',Options.onDroppableRelease)\n    onDrop             = allowedFunction('\"onDrop\" handler',            Options.onDrop)\n\n    return {\n      Extras, TypesToAccept, HoldDelay,\n      Pannable, PanSensorWidth,PanSensorHeight, PanSpeed,\n// @ts-ignore we cannot validate given functions any further\n      onDroppableEnter, onDroppableMove, onDroppableLeave,\n// @ts-ignore we cannot validate given functions any further\n      onDroppableHold, onDroppableRelease, onDrop,\n    }\n  }\n\n/**** use:asDropZone={options} ****/\n\n  export function asDropZone (\n    Element:HTMLElement|SVGElement, Options:DropZoneOptions\n  ) {\n    let currentDropZoneOptions:DropZoneOptions\n\n    currentDropZoneOptions = parsedDropZoneOptions(Options)\n\n  /**** enteredByDroppable ****/\n\n    function enteredByDroppable (originalEvent:DragEvent) {\n      let Options = currentDropZoneOptions\n\n      performPanningFor(\n        'dropzone',\n        Element, Options, originalEvent.pageX,originalEvent.pageY\n      )\n\n      let DropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      if (\n        ValueIsNumber(Options.HoldDelay) && (Options.HoldDelay as number > 0) &&\n        (Context.HoldWasTriggeredForElement !== Element)\n      ) { startHoldTimer(DropZonePosition) }\n\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none')\n      ) { return }\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) &&\n        (TypesToAccept[Type] !== '')          // \"getData\" is not available here\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) { return }\n\n      let accepted:boolean|undefined = ResultOfHandler(\n        'onDroppableEnter', Options,\n        DropZonePosition.x, DropZonePosition.y,\n        wantedOperation, offeredTypeList, Context.currentDroppableExtras, Options.Extras\n      )\n\n      if (accepted === false) {         // i.e. explicit \"false\" result required\n        return\n      } else {\n        Context.currentDropZoneExtras   = Options.Extras\n        Context.currentDropZoneElement  = Element\n        Context.currentDropZonePosition = DropZonePosition\n\n        Element.classList.add('hovered')\n\n        originalEvent.preventDefault()\n        originalEvent.stopPropagation()\n      }\n    }\n\n  /**** hoveredByDroppable ****/\n// warning: I've already seen leftByDroppable followed by hoveredByDropable!\n\n    function hoveredByDroppable (originalEvent:DragEvent) {\n      let Options = currentDropZoneOptions\n\n      performPanningFor(\n        'dropzone',\n        Element, Options, originalEvent.pageX,originalEvent.pageY\n      )\n\n      let DropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      if (\n        ValueIsNumber(Options.HoldDelay) && (Options.HoldDelay as number > 0) &&\n        (Context.HoldWasTriggeredForElement !== Element)\n      ) {\n        if (Context.HoldPosition == null) {           // see above for reasoning\n          startHoldTimer(DropZonePosition)\n        } else {\n          continueHoldTimer(DropZonePosition)\n        }\n      }\n\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none') ||\n        (Context.currentDropZoneElement != null) && (Context.currentDropZoneElement !== Element)\n      ) {\n        Element.classList.remove('hovered')\n        return\n      }\n\n// in some browsers, it may be that (currentDropZone !== Element)!\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) &&\n        (TypesToAccept[Type] !== '')          // \"getData\" is not available here\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) {\n        if (Context.currentDropZoneElement === Element) {\n          Context.currentDropZoneExtras   = undefined\n          Context.currentDropZoneElement  = undefined\n          Context.currentDropZonePosition = undefined\n        }\n\n        Element.classList.remove('hovered')\n        return\n      }\n\n      Context.currentDropZonePosition = DropZonePosition\n\n      let accepted = ResultOfHandler(\n        'onDroppableMove', Options,\n        Context.currentDropZonePosition.x, Context.currentDropZonePosition.y,\n        wantedOperation, offeredTypeList, Context.currentDroppableExtras, Options.Extras\n      )\n\n      if (accepted === false) {         // i.e. explicit \"false\" result required\n        Context.currentDropZoneExtras   = undefined\n        Context.currentDropZoneElement  = undefined\n        Context.currentDropZonePosition = undefined\n\n        Element.classList.remove('hovered')\n      } else {              // warning: sometimes (currentDropZone !== Element)!\n        Context.currentDropZoneExtras   = Options.Extras\n        Context.currentDropZoneElement  = Element\n//      Context.currentDropZonePosition has already been set before\n\n        Element.classList.add('hovered')\n\n        originalEvent.preventDefault()            // never allow default action!\n//      originalEvent.stopPropagation()\n\n        return false          // special return value when drop seems acceptable\n      }\n    }\n\n  /**** leftByDroppable ****/\n\n    function leftByDroppable (originalEvent:DragEvent) {\n      Element.classList.remove('hovered')\n      Context.DropZonePanning = false\n\n      stopHoldTimer()\n\n      let Options = currentDropZoneOptions\n\n      if (Context.currentDropZoneElement === Element) {\n        if (Context.currentTypeTransferred == null) {   // see explanation below\n          Context.currentDropZoneExtras   = undefined\n          Context.currentDropZoneElement  = undefined\n\n          Context.DroppableWasDropped     = false\n          Context.currentDropZonePosition = undefined\n          Context.currentTypeTransferred  = undefined\n          Context.currentDataTransferred  = undefined\n\n          invokeHandler('onDroppableLeave', Options, Context.currentDroppableExtras, Options.Extras)\n        }                   // swallow \"dragleave\" right after successful \"drop\"\n\n        originalEvent.preventDefault()\n        originalEvent.stopPropagation()\n      }\n    }\n\n  /**** droppedByDroppable ****/\n\n    function droppedByDroppable (originalEvent:DragEvent) {\n      Element.classList.remove('hovered')\n      Context.DropZonePanning = false\n\n      stopHoldTimer()\n\n      if (\n        (originalEvent.dataTransfer == null) ||\n        (originalEvent.dataTransfer.effectAllowed === 'none') ||\n        (Context.currentDropZoneElement !== Element)\n      ) { return }\n\n//    originalEvent.preventDefault()\n      originalEvent.stopPropagation()\n\n      let Options = currentDropZoneOptions\n\n      let wantedOperation:any = originalEvent.dataTransfer.dropEffect\n      if (wantedOperation === 'none') {            // workaround for browser bug\n        switch (originalEvent.dataTransfer.effectAllowed) {\n          case 'copy': case 'move': case 'link':\n            wantedOperation = originalEvent.dataTransfer.effectAllowed; break\n          default:\n            wantedOperation = undefined\n        }\n      }\n\n      let TypesToAccept   = Options.TypesToAccept as TypeAcceptanceSet\n      let offeredTypeList = originalEvent.dataTransfer.types.filter((Type) =>\n        (Type in TypesToAccept) && (\n          (wantedOperation == null) ||\n          (TypesToAccept[Type].indexOf(wantedOperation) >= 0)\n        )\n      ) // cannot use \"originalEvent.dataTransfer.dropEffect\" due to browser bug\n      if (offeredTypeList.length === 0) {\n        Context.currentDropZoneExtras   = undefined\n        Context.currentDropZonePosition = undefined\n\n        Context.DroppableWasDropped     = false\n        Context.currentDropOperation    = undefined\n        Context.currentTypeTransferred  = undefined\n        Context.currentDataTransferred  = undefined\n\n        invokeHandler('onDroppableLeave', Options, Context.currentDroppableExtras, Options.Extras)\n\n        return\n      }\n\n      Context.currentDropZonePosition = asPosition(Conversion.fromDocumentTo(\n        'local', { left:originalEvent.pageX, top:originalEvent.pageY }, Element\n      ))                                         // relative to DropZone element\n\n      let offeredData:any = {}\n        offeredTypeList.forEach(\n// @ts-ignore originalEvent.dataTransfer definitely exists\n          (Type) => offeredData[Type] = originalEvent.dataTransfer.getData(Type)\n        )\n      let acceptedType = ResultOfHandler(\n        'onDrop', Options,\n        Context.currentDropZonePosition.x, Context.currentDropZonePosition.y,\n        wantedOperation, offeredData, Context.currentDroppableExtras, Options.Extras\n      )\n\n      switch (true) {\n        case (acceptedType == null):\n          Context.DroppableWasDropped    = true\n          Context.currentDropOperation   = wantedOperation\n          Context.currentTypeTransferred = undefined\n          Context.currentDataTransferred = undefined\n          break\n        case ValueIsOneOf(acceptedType,offeredTypeList):\n          Context.DroppableWasDropped    = true\n          Context.currentDropOperation   = wantedOperation\n          Context.currentTypeTransferred = acceptedType\n          Context.currentDataTransferred = offeredData[acceptedType]\n          break\n        default:               // handler should return false in case of failure\n          Context.DroppableWasDropped     = false\n          Context.currentDropZoneExtras   = undefined\n          Context.currentDropZonePosition = undefined\n          Context.currentDropOperation    = undefined\n          Context.currentTypeTransferred  = undefined\n          Context.currentDataTransferred  = undefined\n\n//        invokeHandler('onDroppableLeave', Options, currentDroppableExtras, Options.Extras)\n      }\n\n      Context.currentDropZoneElement = undefined\n    }\n\n  /**** startHoldTimer ****/\n\n    function startHoldTimer (DropZonePosition:Position):void {\n      Context.HoldPosition = DropZonePosition\n\n      if (Context.HoldTimer != null) {\n        clearTimeout(Context.HoldTimer)\n      }\n      Context.HoldTimer    = setTimeout(triggerHold, Options.HoldDelay)\n    }\n\n  /**** continueHoldTimer ****/\n\n    function continueHoldTimer (DropZonePosition:Position):void {\n      let Offset = (\n        ((Context.HoldPosition as Position).x-DropZonePosition.x)**2 +\n        ((Context.HoldPosition as Position).y-DropZonePosition.y)**2\n      )\n      if (Offset > 25) {\n        Context.HoldPosition = DropZonePosition\n\n        clearTimeout(Context.HoldTimer)\n        Context.HoldTimer = setTimeout(triggerHold, Options.HoldDelay)\n      }\n    }\n\n  /**** stopHoldTimer ****/\n\n    function stopHoldTimer () {\n      delete Context.HoldPosition\n\n      if (Context.HoldTimer != null) {\n        clearTimeout(Context.HoldTimer)\n        delete Context.HoldTimer\n      }\n\n      delete Context.HoldWasTriggeredForElement\n    }\n\n  /**** triggerHold ****/\n\n    function triggerHold () {\n      let DropZonePosition = (    // sometimes, there is no \"enteredByDroppable\"\n        Context.currentDropZonePosition || Context.HoldPosition\n      )\n\n      delete Context.HoldPosition\n      delete Context.HoldTimer\n\n      Context.HoldWasTriggeredForElement = Element\n\n      invokeHandler(\n        'onDroppableHold', Options,\n        (DropZonePosition as Position).x, (DropZonePosition as Position).y,\n        Context.currentDroppableExtras, Options.Extras\n      )\n    }\n\n  /**** updateDropZoneOptions ****/\n\n    function updateDropZoneOptions (Options:any):void {\n      Options = parsedDropZoneOptions(Options)\n\n      if (\n        (currentDropZoneOptions.Extras == null) && (Options.Extras != null)\n      ) {\n        currentDropZoneOptions.Extras = Options.Extras\n      }           // Extras may be set with delay, but remain constant afterwards\n\n      currentDropZoneOptions.TypesToAccept = Options.TypesToAccept\n\n      currentDropZoneOptions.HoldDelay = Options.HoldDelay\n\n      currentDropZoneOptions.Pannable        = Options.Pannable\n      currentDropZoneOptions.PanSensorWidth  = Options.PanSensorWidth\n      currentDropZoneOptions.PanSensorHeight = Options.PanSensorHeight\n      currentDropZoneOptions.PanSpeed        = Options.PanSpeed\n    }\n\n    Element.setAttribute('draggable','true')\n\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragenter', enteredByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragover',  hoveredByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('dragleave', leftByDroppable)\n// @ts-ignore we know that the passed event is a DragEvent\n    Element.addEventListener('drop',      droppedByDroppable)\n\n    return { update:updateDropZoneOptions }\n  }\n\n/**** ValueIsPosition ****/\n\n  function ValueIsPosition (Candidate:any):boolean {\n    return (\n      ValueIsPlainObject(Candidate) &&\n      ValueIsFiniteNumber(Candidate.x) && ValueIsFiniteNumber(Candidate.y)\n    )\n  }\n\n/**** asPosition ****/\n\n  function asPosition (Value:any):Position {\n    return { x:Value.left, y:Value.top }\n  }\n\n/**** PositionReferenceFor ****/\n\n  function PositionReferenceFor (\n    Element:HTMLElement|SVGElement,\n    Options:DraggableOptions|DroppableOptions\n  ):Element {\n    let PositionReference:Element | undefined | null\n      switch (true) {\n        case (Options.relativeTo === 'parent'):\n          PositionReference = Element.parentElement\n          break\n        case (Options.relativeTo === 'body'):\n          PositionReference = document.body\n          break\n        case (Options.relativeTo instanceof HTMLElement):\n        case (Options.relativeTo instanceof SVGElement):\n  //    case (Options.relativeTo instanceof MathMLElement):\n          PositionReference = Options.relativeTo as Element\n          if (\n            (PositionReference != document.body) &&\n            ! document.body.contains(PositionReference)\n          ) throwError(\n            'InvalidArgument: the HTML element given as \"relativeTo\" option ' +\n            'is not part of this HTML document'\n          )\n          break\n        default:                                                 // CSS selector\n          PositionReference = Element.closest(Options.relativeTo as string)\n      }\n    return (PositionReference == null ? document.body : PositionReference)\n  }\n\n/**** DragImageFor ****/\n\n  function DragImageFor (\n    Element:HTMLElement|SVGElement,\n    Options:DraggableOptions|DroppableOptions\n  ):Element|undefined {\n    switch (true) {\n      case (Options.Dummy === 'standard'):\n        return undefined\n      case (Options.Dummy === 'none'):\n        let invisibleDragImage = document.createElement('div')\n          invisibleDragImage.setAttribute('style',\n            'display:block; position:absolute; width:1px; height:1px; ' +\n            'background:transparent; border:none; margin:0px; padding:0px; ' +\n            'cursor:auto'\n          )\n          document.body.appendChild(invisibleDragImage)\n        return invisibleDragImage\n      case ValueIsNonEmptyString(Options.Dummy):          // may flicker shortly\n        let auxiliaryElement = document.createElement('div')\n          auxiliaryElement.style.display  = 'block'\n          auxiliaryElement.style.position = 'absolute'\n          auxiliaryElement.style.left     = (document.body.scrollWidth + 100)+'px'\n\n          document.body.appendChild(auxiliaryElement)\n\n          auxiliaryElement.innerHTML = Options.Dummy as string\n        return auxiliaryElement.children[0]\n      case (Options.Dummy instanceof HTMLElement):\n      case (Options.Dummy instanceof SVGElement):\n//    case (Options.Dummy instanceof MathMLElement):\n        return Options.Dummy as Element\n      case ValueIsFunction(Options.Dummy):\n        let Candidate:HTMLElement | SVGElement | undefined = undefined\n        try {\n          Candidate = (Options.Dummy as Function)(Options.Extras, Element)\n        } catch (Signal) {\n          console.error('RuntimeError: creating draggable dummy failed',Signal)\n        }\n\n        if (Candidate != null) {\n          if ((Candidate instanceof HTMLElement) || (Candidate instanceof SVGElement)) {\n            return Candidate\n          } else {\n            console.error(\n              'InvalidArgument: the newly created draggable dummy is ' +\n              'neither an HTML nor an SVG element'\n            )\n          }\n        }\n    }\n  }\n\n  /**** performPanningFor ****/\n\n    function performPanningFor (\n      Type:'draggable'|'dropzone',\n      Element:HTMLElement | SVGElement, Options:DraggableOptions,\n      xOnPage:number,yOnPage:number\n    ):void {\n      if ((Type === 'draggable') && Context.DropZonePanning) { return }\n\n      if (\n        (Options.Pannable == null) ||\n        ((Options.PanSensorWidth === 0) && (Options.PanSensorHeight === 0)) ||\n        (Options.PanSpeed === 0)\n      ) { Context.DropZonePanning = false; return }\n\n      let pannableElement:Element|undefined|null\n        switch (true) {\n          case ValueIsNonEmptyString(Options.Pannable):\n            pannableElement = Element.parentElement\n            if (pannableElement != null) {\n              pannableElement = pannableElement.closest(Options.Pannable as string)\n            }\n            break\n          case (Options.Pannable === 'this') && (Type === 'dropzone'):\n            pannableElement = Element\n            break\n          case (Options.Pannable instanceof HTMLElement):\n          case (Options.Pannable instanceof SVGElement):\n//        case (Options.Pannable instanceof MathMLElement):\n            pannableElement = Options.Pannable as HTMLElement\n        }\n      if (pannableElement == null) { Context.DropZonePanning = false; return }\n\n      let { left:xInPannable, top:yInPannable } = Conversion.fromDocumentTo(\n        'local', { left:xOnPage, top:yOnPage }, pannableElement\n      )\n\n      if ((xInPannable >= 0) && (xInPannable < (Options.PanSensorWidth as number))) {\n        pannableElement.scrollLeft = Math.max(\n          0,pannableElement.scrollLeft - (Options.PanSpeed as number)\n        )\n      }\n\n      let PannableWidth = pannableElement.clientWidth           // w/o scrollbar\n      if (\n        (xInPannable >= PannableWidth-(Options.PanSensorWidth as number)) &&\n        (xInPannable < PannableWidth)\n      ) {\n        pannableElement.scrollLeft = Math.min(\n          pannableElement.scrollLeft + (Options.PanSpeed as number),\n          pannableElement.scrollWidth-PannableWidth\n        )\n      }\n\n      if ((yInPannable >= 0) && (yInPannable < (Options.PanSensorHeight as number))) {\n        pannableElement.scrollTop = Math.max(\n          0,pannableElement.scrollTop - (Options.PanSpeed as number)\n        )\n      }\n\n      let PannableHeight = pannableElement.clientHeight         // w/o scrollbar\n      if (\n        (yInPannable >= PannableHeight-(Options.PanSensorHeight as number)) &&\n        (yInPannable < PannableHeight)\n      ) {\n        pannableElement.scrollTop = Math.min(\n          pannableElement.scrollTop + (Options.PanSpeed as number),\n          pannableElement.scrollHeight-PannableHeight\n        )\n      }\n\n      Context.DropZonePanning = (Type === 'dropzone')\n    }\n\n/**** parsedOperations ****/\n\n  function parsedOperations (\n    Description:string, Argument:any, Default:string='copy move link'\n  ):string {\n    let Operations = allowedString(Description,Argument) || Default\n\n    switch (Operations.trim()) {\n      case 'all':  return 'copy move link'\n      case 'none': return ''\n    }\n\n    let OperationList = Operations.trim().replace(/\\s+/g,' ').split(' ')\n      allowListSatisfying(\n        Description,OperationList,\n        (Operation:string) => ValueIsOneOf(Operation,DropOperations)\n      )\n    return OperationList.reduce(\n      (Result:string, Operation:string) => (\n        Result.indexOf(Operation) < 0 ? Result + Operation + ' ': Result\n      ),' '\n    )\n  }\n\n/**** allowedEffectsFrom ****/\n\n  type allowedEffects = (\n    'none'|'copy'|'copyLink'|'copyMove'|'link'|'linkMove'|'move'|'all'\n  )\n\n  function allowedEffectsFrom (Operations:string):allowedEffects {\n    let EffectIndex = (                                       // Horner's method\n      (Operations.indexOf('move') < 0 ? 0 : 1) * 2 +\n      (Operations.indexOf('link') < 0 ? 0 : 1)\n    ) * 2 +\n    (Operations.indexOf('copy') < 0 ? 0 : 1)\n\n    return [\n      'none','copy','link','copyLink','move','copyMove','linkMove','all'\n    ][EffectIndex] as allowedEffects\n  }\n\n/**** invokeHandler ****/\n\n  function invokeHandler (Name:string, Options:any, ...Arguments:any):any {\n    if (Options[Name] != null) {\n      try {\n        return Options[Name].apply(null,Arguments)\n      } catch (Signal) {\n        console.error(quoted(Name) + ' handler failed',Signal)\n      }\n    }\n  }\n  const ResultOfHandler = invokeHandler\n\n\n"],"names":["Context","global","__DragAndDropActions","parsedDraggableOptions","Options","Extras","relativeTo","onlyFrom","neverFrom","Dummy","DummyOffsetX","DummyOffsetY","minX","minY","maxX","maxY","Pannable","PanSensorWidth","PanSensorHeight","PanSpeed","onDragStart","Candidate","allowedPlainObject","ValueIsNonEmptyString","HTMLElement","SVGElement","throwError","allowedNonEmptyString","undefined","ValueIsFunction","allowedFiniteNumber","Infinity","allowedOrdinal","ValueIsPlainObject","ValueIsFiniteNumber","x","y","_a","x_1","y_1","allowedFunction","onDragMove","onDragEnd","onDragCancel","fromForbiddenElement","Element","originalEvent","fromElement","clientX","clientY","touchedElement","document","elementFromPoint","innerElementOf","closest","contains","innerElements","children","i","l","length","innerElement","Position","Conversion","fromLocalTo","left","top","offsetWidth","offsetHeight","DropOperations","parsedDroppableOptions","Operations","DataToOffer","parsedOperations","Object","assign","onDropZoneEnter","onDropZoneHover","onDropZoneLeave","onDropped","parsedDropZoneOptions","TypesToAccept","HoldDelay","Type","allowPlainObject","create","hasOwnProperty","quoted","allowedIntegerInRange","onDroppableEnter","onDroppableMove","onDroppableLeave","onDroppableHold","onDroppableRelease","onDrop","asPosition","Value","PositionReferenceFor","PositionReference","parentElement","body","DragImageFor","invisibleDragImage","createElement","setAttribute","appendChild","auxiliaryElement","style","display","position","scrollWidth","innerHTML","Signal","console","error","performPanningFor","xOnPage","yOnPage","DropZonePanning","pannableElement","fromDocumentTo","xInPannable","yInPannable","scrollLeft","Math","max","PannableWidth","clientWidth","min","scrollTop","PannableHeight","clientHeight","scrollHeight","Description","Argument","Default","allowedString","trim","OperationList","replace","split","allowListSatisfying","Operation","ValueIsOneOf","reduce","Result","indexOf","invokeHandler","Name","_i","Arguments","apply","ResultOfHandler","isDragged","currentDraggableOptions","ReferenceDeltaX","ReferenceDeltaY","PositioningWasDelayed","DragImage","initialPosition","lastPosition","addEventListener","stopPropagation","preventDefault","relativePosition","pageX","pageY","StartPosition","constrained","dataTransfer","OffsetX","OffsetY","PositionInDraggable","setDragImage","setTimeout","removeChild","ValueIsString","effectAllowed","classList","add","screenX","screenY","dx","dy","remove","update","currentDropZoneOptions","startHoldTimer","DropZonePosition","HoldPosition","HoldTimer","clearTimeout","triggerHold","continueHoldTimer","stopHoldTimer","HoldWasTriggeredForElement","currentDropZonePosition","currentDroppableExtras","ValueIsNumber","wantedOperation","dropEffect","offeredTypeList","types","filter","currentDropZoneExtras","currentDropZoneElement","currentTypeTransferred","DroppableWasDropped","currentDataTransferred","currentDropOperation","offeredData","forEach","getData","acceptedType","currentDroppableOptions","lastDropZoneElement","lastDropZoneExtras","allowedEffects","ObjectIsNotEmpty","setData","updateDraggableOptions","updateDroppableOptions"],"mappings":"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"}